// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iterator.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ai.Grakn.Rpc.Generated {

  /// <summary>Holder for reflection information generated from iterator.proto</summary>
  public static partial class IteratorReflection {

    #region Descriptor
    /// <summary>File descriptor for iterator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IteratorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5pdGVyYXRvci5wcm90bxIWYWkuZ3Jha24ucnBjLmdlbmVyYXRlZCI+CgRO",
            "ZXh0EjYKCml0ZXJhdG9ySWQYASABKAsyIi5haS5ncmFrbi5ycGMuZ2VuZXJh",
            "dGVkLkl0ZXJhdG9ySWQiPgoEU3RvcBI2CgppdGVyYXRvcklkGAEgASgLMiIu",
            "YWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5JdGVyYXRvcklkIhgKCkl0ZXJhdG9y",
            "SWQSCgoCaWQYASABKAVCDkIMR3JwY0l0ZXJhdG9yYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Next), global::Ai.Grakn.Rpc.Generated.Next.Parser, new[]{ "IteratorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Stop), global::Ai.Grakn.Rpc.Generated.Stop.Parser, new[]{ "IteratorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.IteratorId), global::Ai.Grakn.Rpc.Generated.IteratorId.Parser, new[]{ "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///Request next query result.
  ///After this message, the server will send a `QueryResult` or a `Done` message and then accept a command message.
  /// </summary>
  public sealed partial class Next : pb::IMessage<Next> {
    private static readonly pb::MessageParser<Next> _parser = new pb::MessageParser<Next>(() => new Next());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Next> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.IteratorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next(Next other) : this() {
      IteratorId = other.iteratorId_ != null ? other.IteratorId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Next Clone() {
      return new Next(this);
    }

    /// <summary>Field number for the "iteratorId" field.</summary>
    public const int IteratorIdFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.IteratorId iteratorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.IteratorId IteratorId {
      get { return iteratorId_; }
      set {
        iteratorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Next);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Next other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IteratorId, other.IteratorId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (iteratorId_ != null) hash ^= IteratorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (iteratorId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IteratorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (iteratorId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IteratorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Next other) {
      if (other == null) {
        return;
      }
      if (other.iteratorId_ != null) {
        if (iteratorId_ == null) {
          iteratorId_ = new global::Ai.Grakn.Rpc.Generated.IteratorId();
        }
        IteratorId.MergeFrom(other.IteratorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (iteratorId_ == null) {
              iteratorId_ = new global::Ai.Grakn.Rpc.Generated.IteratorId();
            }
            input.ReadMessage(iteratorId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Tell the server we have finished executing a query.
  ///After this message, the server will send a `Done` message and then accept a command message.
  /// </summary>
  public sealed partial class Stop : pb::IMessage<Stop> {
    private static readonly pb::MessageParser<Stop> _parser = new pb::MessageParser<Stop>(() => new Stop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.IteratorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stop(Stop other) : this() {
      IteratorId = other.iteratorId_ != null ? other.IteratorId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stop Clone() {
      return new Stop(this);
    }

    /// <summary>Field number for the "iteratorId" field.</summary>
    public const int IteratorIdFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.IteratorId iteratorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.IteratorId IteratorId {
      get { return iteratorId_; }
      set {
        iteratorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IteratorId, other.IteratorId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (iteratorId_ != null) hash ^= IteratorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (iteratorId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IteratorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (iteratorId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IteratorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stop other) {
      if (other == null) {
        return;
      }
      if (other.iteratorId_ != null) {
        if (iteratorId_ == null) {
          iteratorId_ = new global::Ai.Grakn.Rpc.Generated.IteratorId();
        }
        IteratorId.MergeFrom(other.IteratorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (iteratorId_ == null) {
              iteratorId_ = new global::Ai.Grakn.Rpc.Generated.IteratorId();
            }
            input.ReadMessage(iteratorId_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IteratorId : pb::IMessage<IteratorId> {
    private static readonly pb::MessageParser<IteratorId> _parser = new pb::MessageParser<IteratorId>(() => new IteratorId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IteratorId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.IteratorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IteratorId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IteratorId(IteratorId other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IteratorId Clone() {
      return new IteratorId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IteratorId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IteratorId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IteratorId other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
