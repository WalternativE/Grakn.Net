// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grakn.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ai.Grakn.Rpc.Generated {

  /// <summary>Holder for reflection information generated from grakn.proto</summary>
  public static partial class GraknReflection {

    #region Descriptor
    /// <summary>File descriptor for grakn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GraknReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtncmFrbi5wcm90bxIWYWkuZ3Jha24ucnBjLmdlbmVyYXRlZBoNY29uY2Vw",
            "dC5wcm90bxoOaXRlcmF0b3IucHJvdG8irgYKCVR4UmVxdWVzdBIsCgRvcGVu",
            "GAEgASgLMhwuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5PcGVuSAASMAoGY29t",
            "bWl0GAIgASgLMh4uYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Db21taXRIABI2",
            "CglleGVjUXVlcnkYAyABKAsyIS5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkV4",
            "ZWNRdWVyeUgAEiwKBG5leHQYBCABKAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJh",
            "dGVkLk5leHRIABIsCgRzdG9wGAUgASgLMhwuYWkuZ3Jha24ucnBjLmdlbmVy",
            "YXRlZC5TdG9wSAASRAoQcnVuQ29uY2VwdE1ldGhvZBgGIAEoCzIoLmFpLmdy",
            "YWtuLnJwYy5nZW5lcmF0ZWQuUnVuQ29uY2VwdE1ldGhvZEgAEjcKCmdldENv",
            "bmNlcHQYByABKAsyIS5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkNvbmNlcHRJ",
            "ZEgAEjkKEGdldFNjaGVtYUNvbmNlcHQYCCABKAsyHS5haS5ncmFrbi5ycGMu",
            "Z2VuZXJhdGVkLkxhYmVsSAASRgoUZ2V0QXR0cmlidXRlc0J5VmFsdWUYCSAB",
            "KAsyJi5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkF0dHJpYnV0ZVZhbHVlSAAS",
            "NgoNcHV0RW50aXR5VHlwZRgKIAEoCzIdLmFpLmdyYWtuLnJwYy5nZW5lcmF0",
            "ZWQuTGFiZWxIABI8ChNwdXRSZWxhdGlvbnNoaXBUeXBlGAsgASgLMh0uYWku",
            "Z3Jha24ucnBjLmdlbmVyYXRlZC5MYWJlbEgAEkQKEHB1dEF0dHJpYnV0ZVR5",
            "cGUYDCABKAsyKC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlB1dEF0dHJpYnV0",
            "ZVR5cGVIABIwCgdwdXRSb2xlGA0gASgLMh0uYWkuZ3Jha24ucnBjLmdlbmVy",
            "YXRlZC5MYWJlbEgAEjIKB3B1dFJ1bGUYDiABKAsyHy5haS5ncmFrbi5ycGMu",
            "Z2VuZXJhdGVkLlB1dFJ1bGVIAEIJCgdyZXF1ZXN0IjsKDURlbGV0ZVJlcXVl",
            "c3QSKgoEb3BlbhgBIAEoCzIcLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuT3Bl",
            "biIQCg5EZWxldGVSZXNwb25zZSKOAQoET3BlbhIyCghrZXlzcGFjZRgBIAEo",
            "CzIgLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuS2V5c3BhY2USLgoGdHhUeXBl",
            "GAIgASgOMh4uYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5UeFR5cGUSEAoIdXNl",
            "cm5hbWUYAyABKAkSEAoIcGFzc3dvcmQYBCABKAkiCAoGQ29tbWl0ImcKCUV4",
            "ZWNRdWVyeRIsCgVxdWVyeRgBIAEoCzIdLmFpLmdyYWtuLnJwYy5nZW5lcmF0",
            "ZWQuUXVlcnkSLAoFaW5mZXIYAiABKAsyHS5haS5ncmFrbi5ycGMuZ2VuZXJh",
            "dGVkLkluZmVyIn8KEFJ1bkNvbmNlcHRNZXRob2QSLQoCaWQYASABKAsyIS5h",
            "aS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkNvbmNlcHRJZBI8Cg1jb25jZXB0TWV0",
            "aG9kGAIgASgLMiUuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Db25jZXB0TWV0",
            "aG9kInQKEFB1dEF0dHJpYnV0ZVR5cGUSLAoFbGFiZWwYASABKAsyHS5haS5n",
            "cmFrbi5ycGMuZ2VuZXJhdGVkLkxhYmVsEjIKCGRhdGFUeXBlGAIgASgOMiAu",
            "YWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5EYXRhVHlwZSKVAQoHUHV0UnVsZRIs",
            "CgVsYWJlbBgBIAEoCzIdLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuTGFiZWwS",
            "LQoEd2hlbhgCIAEoCzIfLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuUGF0dGVy",
            "bhItCgR0aGVuGAMgASgLMh8uYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5QYXR0",
            "ZXJuIhYKBUluZmVyEg0KBXZhbHVlGAEgASgIIrIDCgpUeFJlc3BvbnNlEjoK",
            "C3F1ZXJ5UmVzdWx0GAEgASgLMiMuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5R",
            "dWVyeVJlc3VsdEgAEiwKBGRvbmUYAiABKAsyHC5haS5ncmFrbi5ycGMuZ2Vu",
            "ZXJhdGVkLkRvbmVIABJCCg9jb25jZXB0UmVzcG9uc2UYAyABKAsyJy5haS5n",
            "cmFrbi5ycGMuZ2VuZXJhdGVkLkNvbmNlcHRSZXNwb25zZUgAEjgKCml0ZXJh",
            "dG9ySWQYBCABKAsyIi5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkl0ZXJhdG9y",
            "SWRIABIyCgdjb25jZXB0GAUgASgLMh8uYWkuZ3Jha24ucnBjLmdlbmVyYXRl",
            "ZC5Db25jZXB0SAASQgoPb3B0aW9uYWxDb25jZXB0GAYgASgLMicuYWkuZ3Jh",
            "a24ucnBjLmdlbmVyYXRlZC5PcHRpb25hbENvbmNlcHRIABI4Cgpyb2xlUGxh",
            "eWVyGAcgASgLMiIuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Sb2xlUGxheWVy",
            "SABCCgoIcmVzcG9uc2UiZQoLUXVlcnlSZXN1bHQSMAoGYW5zd2VyGAEgASgL",
            "Mh4uYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5BbnN3ZXJIABIVCgtvdGhlclJl",
            "c3VsdBgCIAEoCUgAQg0KC3F1ZXJ5UmVzdWx0IgYKBERvbmUilAEKBkFuc3dl",
            "chI6CgZhbnN3ZXIYASADKAsyKi5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkFu",
            "c3dlci5BbnN3ZXJFbnRyeRpOCgtBbnN3ZXJFbnRyeRILCgNrZXkYASABKAkS",
            "LgoFdmFsdWUYAiABKAsyHy5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkNvbmNl",
            "cHQ6AjgBIhkKCEtleXNwYWNlEg0KBXZhbHVlGAEgASgJIhYKBVF1ZXJ5Eg0K",
            "BXZhbHVlGAEgASgJKigKBlR4VHlwZRIICgRSZWFkEAASCQoFV3JpdGUQARIJ",
            "CgVCYXRjaBACMrEBCgVHcmFrbhJPCgJUeBIhLmFpLmdyYWtuLnJwYy5nZW5l",
            "cmF0ZWQuVHhSZXF1ZXN0GiIuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5UeFJl",
            "c3BvbnNlKAEwARJXCgZEZWxldGUSJS5haS5ncmFrbi5ycGMuZ2VuZXJhdGVk",
            "LkRlbGV0ZVJlcXVlc3QaJi5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkRlbGV0",
            "ZVJlc3BvbnNlQgtCCUdycGNHcmFrbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor, global::Ai.Grakn.Rpc.Generated.IteratorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Ai.Grakn.Rpc.Generated.TxType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.TxRequest), global::Ai.Grakn.Rpc.Generated.TxRequest.Parser, new[]{ "Open", "Commit", "ExecQuery", "Next", "Stop", "RunConceptMethod", "GetConcept", "GetSchemaConcept", "GetAttributesByValue", "PutEntityType", "PutRelationshipType", "PutAttributeType", "PutRole", "PutRule" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.DeleteRequest), global::Ai.Grakn.Rpc.Generated.DeleteRequest.Parser, new[]{ "Open" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.DeleteResponse), global::Ai.Grakn.Rpc.Generated.DeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Open), global::Ai.Grakn.Rpc.Generated.Open.Parser, new[]{ "Keyspace", "TxType", "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Commit), global::Ai.Grakn.Rpc.Generated.Commit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.ExecQuery), global::Ai.Grakn.Rpc.Generated.ExecQuery.Parser, new[]{ "Query", "Infer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.RunConceptMethod), global::Ai.Grakn.Rpc.Generated.RunConceptMethod.Parser, new[]{ "Id", "ConceptMethod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.PutAttributeType), global::Ai.Grakn.Rpc.Generated.PutAttributeType.Parser, new[]{ "Label", "DataType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.PutRule), global::Ai.Grakn.Rpc.Generated.PutRule.Parser, new[]{ "Label", "When", "Then" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Infer), global::Ai.Grakn.Rpc.Generated.Infer.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.TxResponse), global::Ai.Grakn.Rpc.Generated.TxResponse.Parser, new[]{ "QueryResult", "Done", "ConceptResponse", "IteratorId", "Concept", "OptionalConcept", "RolePlayer" }, new[]{ "Response" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.QueryResult), global::Ai.Grakn.Rpc.Generated.QueryResult.Parser, new[]{ "Answer", "OtherResult" }, new[]{ "QueryResult" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Done), global::Ai.Grakn.Rpc.Generated.Done.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Answer), global::Ai.Grakn.Rpc.Generated.Answer.Parser, new[]{ "Answer_" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Keyspace), global::Ai.Grakn.Rpc.Generated.Keyspace.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Query), global::Ai.Grakn.Rpc.Generated.Query.Parser, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TxType {
    [pbr::OriginalName("Read")] Read = 0,
    [pbr::OriginalName("Write")] Write = 1,
    [pbr::OriginalName("Batch")] Batch = 2,
  }

  #endregion

  #region Messages
  public sealed partial class TxRequest : pb::IMessage<TxRequest> {
    private static readonly pb::MessageParser<TxRequest> _parser = new pb::MessageParser<TxRequest>(() => new TxRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxRequest(TxRequest other) : this() {
      switch (other.RequestCase) {
        case RequestOneofCase.Open:
          Open = other.Open.Clone();
          break;
        case RequestOneofCase.Commit:
          Commit = other.Commit.Clone();
          break;
        case RequestOneofCase.ExecQuery:
          ExecQuery = other.ExecQuery.Clone();
          break;
        case RequestOneofCase.Next:
          Next = other.Next.Clone();
          break;
        case RequestOneofCase.Stop:
          Stop = other.Stop.Clone();
          break;
        case RequestOneofCase.RunConceptMethod:
          RunConceptMethod = other.RunConceptMethod.Clone();
          break;
        case RequestOneofCase.GetConcept:
          GetConcept = other.GetConcept.Clone();
          break;
        case RequestOneofCase.GetSchemaConcept:
          GetSchemaConcept = other.GetSchemaConcept.Clone();
          break;
        case RequestOneofCase.GetAttributesByValue:
          GetAttributesByValue = other.GetAttributesByValue.Clone();
          break;
        case RequestOneofCase.PutEntityType:
          PutEntityType = other.PutEntityType.Clone();
          break;
        case RequestOneofCase.PutRelationshipType:
          PutRelationshipType = other.PutRelationshipType.Clone();
          break;
        case RequestOneofCase.PutAttributeType:
          PutAttributeType = other.PutAttributeType.Clone();
          break;
        case RequestOneofCase.PutRole:
          PutRole = other.PutRole.Clone();
          break;
        case RequestOneofCase.PutRule:
          PutRule = other.PutRule.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxRequest Clone() {
      return new TxRequest(this);
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    /// <summary>
    /// returns Done
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Open Open {
      get { return requestCase_ == RequestOneofCase.Open ? (global::Ai.Grakn.Rpc.Generated.Open) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Open;
      }
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 2;
    /// <summary>
    /// returns Done
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Commit Commit {
      get { return requestCase_ == RequestOneofCase.Commit ? (global::Ai.Grakn.Rpc.Generated.Commit) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Commit;
      }
    }

    /// <summary>Field number for the "execQuery" field.</summary>
    public const int ExecQueryFieldNumber = 3;
    /// <summary>
    /// returns QueryResult, Done, or IteratorId of QueryResult
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.ExecQuery ExecQuery {
      get { return requestCase_ == RequestOneofCase.ExecQuery ? (global::Ai.Grakn.Rpc.Generated.ExecQuery) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.ExecQuery;
      }
    }

    /// <summary>Field number for the "next" field.</summary>
    public const int NextFieldNumber = 4;
    /// <summary>
    /// returns QueryResult or Done
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Next Next {
      get { return requestCase_ == RequestOneofCase.Next ? (global::Ai.Grakn.Rpc.Generated.Next) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Next;
      }
    }

    /// <summary>Field number for the "stop" field.</summary>
    public const int StopFieldNumber = 5;
    /// <summary>
    /// returns Done
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Stop Stop {
      get { return requestCase_ == RequestOneofCase.Stop ? (global::Ai.Grakn.Rpc.Generated.Stop) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Stop;
      }
    }

    /// <summary>Field number for the "runConceptMethod" field.</summary>
    public const int RunConceptMethodFieldNumber = 6;
    /// <summary>
    /// returns ConceptResponse
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.RunConceptMethod RunConceptMethod {
      get { return requestCase_ == RequestOneofCase.RunConceptMethod ? (global::Ai.Grakn.Rpc.Generated.RunConceptMethod) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RunConceptMethod;
      }
    }

    /// <summary>Field number for the "getConcept" field.</summary>
    public const int GetConceptFieldNumber = 7;
    /// <summary>
    /// returns OptionalConcept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.ConceptId GetConcept {
      get { return requestCase_ == RequestOneofCase.GetConcept ? (global::Ai.Grakn.Rpc.Generated.ConceptId) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.GetConcept;
      }
    }

    /// <summary>Field number for the "getSchemaConcept" field.</summary>
    public const int GetSchemaConceptFieldNumber = 8;
    /// <summary>
    /// returns OptionalConcept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Label GetSchemaConcept {
      get { return requestCase_ == RequestOneofCase.GetSchemaConcept ? (global::Ai.Grakn.Rpc.Generated.Label) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.GetSchemaConcept;
      }
    }

    /// <summary>Field number for the "getAttributesByValue" field.</summary>
    public const int GetAttributesByValueFieldNumber = 9;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.AttributeValue GetAttributesByValue {
      get { return requestCase_ == RequestOneofCase.GetAttributesByValue ? (global::Ai.Grakn.Rpc.Generated.AttributeValue) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.GetAttributesByValue;
      }
    }

    /// <summary>Field number for the "putEntityType" field.</summary>
    public const int PutEntityTypeFieldNumber = 10;
    /// <summary>
    /// returns Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Label PutEntityType {
      get { return requestCase_ == RequestOneofCase.PutEntityType ? (global::Ai.Grakn.Rpc.Generated.Label) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PutEntityType;
      }
    }

    /// <summary>Field number for the "putRelationshipType" field.</summary>
    public const int PutRelationshipTypeFieldNumber = 11;
    /// <summary>
    /// returns Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Label PutRelationshipType {
      get { return requestCase_ == RequestOneofCase.PutRelationshipType ? (global::Ai.Grakn.Rpc.Generated.Label) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PutRelationshipType;
      }
    }

    /// <summary>Field number for the "putAttributeType" field.</summary>
    public const int PutAttributeTypeFieldNumber = 12;
    /// <summary>
    /// returns Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.PutAttributeType PutAttributeType {
      get { return requestCase_ == RequestOneofCase.PutAttributeType ? (global::Ai.Grakn.Rpc.Generated.PutAttributeType) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PutAttributeType;
      }
    }

    /// <summary>Field number for the "putRole" field.</summary>
    public const int PutRoleFieldNumber = 13;
    /// <summary>
    /// returns Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Label PutRole {
      get { return requestCase_ == RequestOneofCase.PutRole ? (global::Ai.Grakn.Rpc.Generated.Label) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PutRole;
      }
    }

    /// <summary>Field number for the "putRule" field.</summary>
    public const int PutRuleFieldNumber = 14;
    /// <summary>
    /// returns Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.PutRule PutRule {
      get { return requestCase_ == RequestOneofCase.PutRule ? (global::Ai.Grakn.Rpc.Generated.PutRule) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PutRule;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      Open = 1,
      Commit = 2,
      ExecQuery = 3,
      Next = 4,
      Stop = 5,
      RunConceptMethod = 6,
      GetConcept = 7,
      GetSchemaConcept = 8,
      GetAttributesByValue = 9,
      PutEntityType = 10,
      PutRelationshipType = 11,
      PutAttributeType = 12,
      PutRole = 13,
      PutRule = 14,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Open, other.Open)) return false;
      if (!object.Equals(Commit, other.Commit)) return false;
      if (!object.Equals(ExecQuery, other.ExecQuery)) return false;
      if (!object.Equals(Next, other.Next)) return false;
      if (!object.Equals(Stop, other.Stop)) return false;
      if (!object.Equals(RunConceptMethod, other.RunConceptMethod)) return false;
      if (!object.Equals(GetConcept, other.GetConcept)) return false;
      if (!object.Equals(GetSchemaConcept, other.GetSchemaConcept)) return false;
      if (!object.Equals(GetAttributesByValue, other.GetAttributesByValue)) return false;
      if (!object.Equals(PutEntityType, other.PutEntityType)) return false;
      if (!object.Equals(PutRelationshipType, other.PutRelationshipType)) return false;
      if (!object.Equals(PutAttributeType, other.PutAttributeType)) return false;
      if (!object.Equals(PutRole, other.PutRole)) return false;
      if (!object.Equals(PutRule, other.PutRule)) return false;
      if (RequestCase != other.RequestCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.Open) hash ^= Open.GetHashCode();
      if (requestCase_ == RequestOneofCase.Commit) hash ^= Commit.GetHashCode();
      if (requestCase_ == RequestOneofCase.ExecQuery) hash ^= ExecQuery.GetHashCode();
      if (requestCase_ == RequestOneofCase.Next) hash ^= Next.GetHashCode();
      if (requestCase_ == RequestOneofCase.Stop) hash ^= Stop.GetHashCode();
      if (requestCase_ == RequestOneofCase.RunConceptMethod) hash ^= RunConceptMethod.GetHashCode();
      if (requestCase_ == RequestOneofCase.GetConcept) hash ^= GetConcept.GetHashCode();
      if (requestCase_ == RequestOneofCase.GetSchemaConcept) hash ^= GetSchemaConcept.GetHashCode();
      if (requestCase_ == RequestOneofCase.GetAttributesByValue) hash ^= GetAttributesByValue.GetHashCode();
      if (requestCase_ == RequestOneofCase.PutEntityType) hash ^= PutEntityType.GetHashCode();
      if (requestCase_ == RequestOneofCase.PutRelationshipType) hash ^= PutRelationshipType.GetHashCode();
      if (requestCase_ == RequestOneofCase.PutAttributeType) hash ^= PutAttributeType.GetHashCode();
      if (requestCase_ == RequestOneofCase.PutRole) hash ^= PutRole.GetHashCode();
      if (requestCase_ == RequestOneofCase.PutRule) hash ^= PutRule.GetHashCode();
      hash ^= (int) requestCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestCase_ == RequestOneofCase.Open) {
        output.WriteRawTag(10);
        output.WriteMessage(Open);
      }
      if (requestCase_ == RequestOneofCase.Commit) {
        output.WriteRawTag(18);
        output.WriteMessage(Commit);
      }
      if (requestCase_ == RequestOneofCase.ExecQuery) {
        output.WriteRawTag(26);
        output.WriteMessage(ExecQuery);
      }
      if (requestCase_ == RequestOneofCase.Next) {
        output.WriteRawTag(34);
        output.WriteMessage(Next);
      }
      if (requestCase_ == RequestOneofCase.Stop) {
        output.WriteRawTag(42);
        output.WriteMessage(Stop);
      }
      if (requestCase_ == RequestOneofCase.RunConceptMethod) {
        output.WriteRawTag(50);
        output.WriteMessage(RunConceptMethod);
      }
      if (requestCase_ == RequestOneofCase.GetConcept) {
        output.WriteRawTag(58);
        output.WriteMessage(GetConcept);
      }
      if (requestCase_ == RequestOneofCase.GetSchemaConcept) {
        output.WriteRawTag(66);
        output.WriteMessage(GetSchemaConcept);
      }
      if (requestCase_ == RequestOneofCase.GetAttributesByValue) {
        output.WriteRawTag(74);
        output.WriteMessage(GetAttributesByValue);
      }
      if (requestCase_ == RequestOneofCase.PutEntityType) {
        output.WriteRawTag(82);
        output.WriteMessage(PutEntityType);
      }
      if (requestCase_ == RequestOneofCase.PutRelationshipType) {
        output.WriteRawTag(90);
        output.WriteMessage(PutRelationshipType);
      }
      if (requestCase_ == RequestOneofCase.PutAttributeType) {
        output.WriteRawTag(98);
        output.WriteMessage(PutAttributeType);
      }
      if (requestCase_ == RequestOneofCase.PutRole) {
        output.WriteRawTag(106);
        output.WriteMessage(PutRole);
      }
      if (requestCase_ == RequestOneofCase.PutRule) {
        output.WriteRawTag(114);
        output.WriteMessage(PutRule);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.Open) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Open);
      }
      if (requestCase_ == RequestOneofCase.Commit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commit);
      }
      if (requestCase_ == RequestOneofCase.ExecQuery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecQuery);
      }
      if (requestCase_ == RequestOneofCase.Next) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Next);
      }
      if (requestCase_ == RequestOneofCase.Stop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stop);
      }
      if (requestCase_ == RequestOneofCase.RunConceptMethod) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunConceptMethod);
      }
      if (requestCase_ == RequestOneofCase.GetConcept) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetConcept);
      }
      if (requestCase_ == RequestOneofCase.GetSchemaConcept) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetSchemaConcept);
      }
      if (requestCase_ == RequestOneofCase.GetAttributesByValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAttributesByValue);
      }
      if (requestCase_ == RequestOneofCase.PutEntityType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PutEntityType);
      }
      if (requestCase_ == RequestOneofCase.PutRelationshipType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PutRelationshipType);
      }
      if (requestCase_ == RequestOneofCase.PutAttributeType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PutAttributeType);
      }
      if (requestCase_ == RequestOneofCase.PutRole) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PutRole);
      }
      if (requestCase_ == RequestOneofCase.PutRule) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PutRule);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.Open:
          if (Open == null) {
            Open = new global::Ai.Grakn.Rpc.Generated.Open();
          }
          Open.MergeFrom(other.Open);
          break;
        case RequestOneofCase.Commit:
          if (Commit == null) {
            Commit = new global::Ai.Grakn.Rpc.Generated.Commit();
          }
          Commit.MergeFrom(other.Commit);
          break;
        case RequestOneofCase.ExecQuery:
          if (ExecQuery == null) {
            ExecQuery = new global::Ai.Grakn.Rpc.Generated.ExecQuery();
          }
          ExecQuery.MergeFrom(other.ExecQuery);
          break;
        case RequestOneofCase.Next:
          if (Next == null) {
            Next = new global::Ai.Grakn.Rpc.Generated.Next();
          }
          Next.MergeFrom(other.Next);
          break;
        case RequestOneofCase.Stop:
          if (Stop == null) {
            Stop = new global::Ai.Grakn.Rpc.Generated.Stop();
          }
          Stop.MergeFrom(other.Stop);
          break;
        case RequestOneofCase.RunConceptMethod:
          if (RunConceptMethod == null) {
            RunConceptMethod = new global::Ai.Grakn.Rpc.Generated.RunConceptMethod();
          }
          RunConceptMethod.MergeFrom(other.RunConceptMethod);
          break;
        case RequestOneofCase.GetConcept:
          if (GetConcept == null) {
            GetConcept = new global::Ai.Grakn.Rpc.Generated.ConceptId();
          }
          GetConcept.MergeFrom(other.GetConcept);
          break;
        case RequestOneofCase.GetSchemaConcept:
          if (GetSchemaConcept == null) {
            GetSchemaConcept = new global::Ai.Grakn.Rpc.Generated.Label();
          }
          GetSchemaConcept.MergeFrom(other.GetSchemaConcept);
          break;
        case RequestOneofCase.GetAttributesByValue:
          if (GetAttributesByValue == null) {
            GetAttributesByValue = new global::Ai.Grakn.Rpc.Generated.AttributeValue();
          }
          GetAttributesByValue.MergeFrom(other.GetAttributesByValue);
          break;
        case RequestOneofCase.PutEntityType:
          if (PutEntityType == null) {
            PutEntityType = new global::Ai.Grakn.Rpc.Generated.Label();
          }
          PutEntityType.MergeFrom(other.PutEntityType);
          break;
        case RequestOneofCase.PutRelationshipType:
          if (PutRelationshipType == null) {
            PutRelationshipType = new global::Ai.Grakn.Rpc.Generated.Label();
          }
          PutRelationshipType.MergeFrom(other.PutRelationshipType);
          break;
        case RequestOneofCase.PutAttributeType:
          if (PutAttributeType == null) {
            PutAttributeType = new global::Ai.Grakn.Rpc.Generated.PutAttributeType();
          }
          PutAttributeType.MergeFrom(other.PutAttributeType);
          break;
        case RequestOneofCase.PutRole:
          if (PutRole == null) {
            PutRole = new global::Ai.Grakn.Rpc.Generated.Label();
          }
          PutRole.MergeFrom(other.PutRole);
          break;
        case RequestOneofCase.PutRule:
          if (PutRule == null) {
            PutRule = new global::Ai.Grakn.Rpc.Generated.PutRule();
          }
          PutRule.MergeFrom(other.PutRule);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ai.Grakn.Rpc.Generated.Open subBuilder = new global::Ai.Grakn.Rpc.Generated.Open();
            if (requestCase_ == RequestOneofCase.Open) {
              subBuilder.MergeFrom(Open);
            }
            input.ReadMessage(subBuilder);
            Open = subBuilder;
            break;
          }
          case 18: {
            global::Ai.Grakn.Rpc.Generated.Commit subBuilder = new global::Ai.Grakn.Rpc.Generated.Commit();
            if (requestCase_ == RequestOneofCase.Commit) {
              subBuilder.MergeFrom(Commit);
            }
            input.ReadMessage(subBuilder);
            Commit = subBuilder;
            break;
          }
          case 26: {
            global::Ai.Grakn.Rpc.Generated.ExecQuery subBuilder = new global::Ai.Grakn.Rpc.Generated.ExecQuery();
            if (requestCase_ == RequestOneofCase.ExecQuery) {
              subBuilder.MergeFrom(ExecQuery);
            }
            input.ReadMessage(subBuilder);
            ExecQuery = subBuilder;
            break;
          }
          case 34: {
            global::Ai.Grakn.Rpc.Generated.Next subBuilder = new global::Ai.Grakn.Rpc.Generated.Next();
            if (requestCase_ == RequestOneofCase.Next) {
              subBuilder.MergeFrom(Next);
            }
            input.ReadMessage(subBuilder);
            Next = subBuilder;
            break;
          }
          case 42: {
            global::Ai.Grakn.Rpc.Generated.Stop subBuilder = new global::Ai.Grakn.Rpc.Generated.Stop();
            if (requestCase_ == RequestOneofCase.Stop) {
              subBuilder.MergeFrom(Stop);
            }
            input.ReadMessage(subBuilder);
            Stop = subBuilder;
            break;
          }
          case 50: {
            global::Ai.Grakn.Rpc.Generated.RunConceptMethod subBuilder = new global::Ai.Grakn.Rpc.Generated.RunConceptMethod();
            if (requestCase_ == RequestOneofCase.RunConceptMethod) {
              subBuilder.MergeFrom(RunConceptMethod);
            }
            input.ReadMessage(subBuilder);
            RunConceptMethod = subBuilder;
            break;
          }
          case 58: {
            global::Ai.Grakn.Rpc.Generated.ConceptId subBuilder = new global::Ai.Grakn.Rpc.Generated.ConceptId();
            if (requestCase_ == RequestOneofCase.GetConcept) {
              subBuilder.MergeFrom(GetConcept);
            }
            input.ReadMessage(subBuilder);
            GetConcept = subBuilder;
            break;
          }
          case 66: {
            global::Ai.Grakn.Rpc.Generated.Label subBuilder = new global::Ai.Grakn.Rpc.Generated.Label();
            if (requestCase_ == RequestOneofCase.GetSchemaConcept) {
              subBuilder.MergeFrom(GetSchemaConcept);
            }
            input.ReadMessage(subBuilder);
            GetSchemaConcept = subBuilder;
            break;
          }
          case 74: {
            global::Ai.Grakn.Rpc.Generated.AttributeValue subBuilder = new global::Ai.Grakn.Rpc.Generated.AttributeValue();
            if (requestCase_ == RequestOneofCase.GetAttributesByValue) {
              subBuilder.MergeFrom(GetAttributesByValue);
            }
            input.ReadMessage(subBuilder);
            GetAttributesByValue = subBuilder;
            break;
          }
          case 82: {
            global::Ai.Grakn.Rpc.Generated.Label subBuilder = new global::Ai.Grakn.Rpc.Generated.Label();
            if (requestCase_ == RequestOneofCase.PutEntityType) {
              subBuilder.MergeFrom(PutEntityType);
            }
            input.ReadMessage(subBuilder);
            PutEntityType = subBuilder;
            break;
          }
          case 90: {
            global::Ai.Grakn.Rpc.Generated.Label subBuilder = new global::Ai.Grakn.Rpc.Generated.Label();
            if (requestCase_ == RequestOneofCase.PutRelationshipType) {
              subBuilder.MergeFrom(PutRelationshipType);
            }
            input.ReadMessage(subBuilder);
            PutRelationshipType = subBuilder;
            break;
          }
          case 98: {
            global::Ai.Grakn.Rpc.Generated.PutAttributeType subBuilder = new global::Ai.Grakn.Rpc.Generated.PutAttributeType();
            if (requestCase_ == RequestOneofCase.PutAttributeType) {
              subBuilder.MergeFrom(PutAttributeType);
            }
            input.ReadMessage(subBuilder);
            PutAttributeType = subBuilder;
            break;
          }
          case 106: {
            global::Ai.Grakn.Rpc.Generated.Label subBuilder = new global::Ai.Grakn.Rpc.Generated.Label();
            if (requestCase_ == RequestOneofCase.PutRole) {
              subBuilder.MergeFrom(PutRole);
            }
            input.ReadMessage(subBuilder);
            PutRole = subBuilder;
            break;
          }
          case 114: {
            global::Ai.Grakn.Rpc.Generated.PutRule subBuilder = new global::Ai.Grakn.Rpc.Generated.PutRule();
            if (requestCase_ == RequestOneofCase.PutRule) {
              subBuilder.MergeFrom(PutRule);
            }
            input.ReadMessage(subBuilder);
            PutRule = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      Open = other.open_ != null ? other.Open.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.Open open_;
    /// <summary>
    /// This open request describes how to open the transaction in order to delete the keyspace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Open Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Open, other.Open)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (open_ != null) hash ^= Open.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (open_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Open);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (open_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Open);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.open_ != null) {
        if (open_ == null) {
          open_ = new global::Ai.Grakn.Rpc.Generated.Open();
        }
        Open.MergeFrom(other.Open);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (open_ == null) {
              open_ = new global::Ai.Grakn.Rpc.Generated.Open();
            }
            input.ReadMessage(open_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///Open a transaction on a keyspace. This must be the first message sent.
  ///After this message, the server will send a `Done` message and then accept a command message.
  /// </summary>
  public sealed partial class Open : pb::IMessage<Open> {
    private static readonly pb::MessageParser<Open> _parser = new pb::MessageParser<Open>(() => new Open());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Open> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Open() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Open(Open other) : this() {
      Keyspace = other.keyspace_ != null ? other.Keyspace.Clone() : null;
      txType_ = other.txType_;
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Open Clone() {
      return new Open(this);
    }

    /// <summary>Field number for the "keyspace" field.</summary>
    public const int KeyspaceFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.Keyspace keyspace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Keyspace Keyspace {
      get { return keyspace_; }
      set {
        keyspace_ = value;
      }
    }

    /// <summary>Field number for the "txType" field.</summary>
    public const int TxTypeFieldNumber = 2;
    private global::Ai.Grakn.Rpc.Generated.TxType txType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.TxType TxType {
      get { return txType_; }
      set {
        txType_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Fields ignored in the open-source version. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Open);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Open other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Keyspace, other.Keyspace)) return false;
      if (TxType != other.TxType) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (keyspace_ != null) hash ^= Keyspace.GetHashCode();
      if (TxType != 0) hash ^= TxType.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keyspace_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Keyspace);
      }
      if (TxType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TxType);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (keyspace_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keyspace);
      }
      if (TxType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TxType);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Open other) {
      if (other == null) {
        return;
      }
      if (other.keyspace_ != null) {
        if (keyspace_ == null) {
          keyspace_ = new global::Ai.Grakn.Rpc.Generated.Keyspace();
        }
        Keyspace.MergeFrom(other.Keyspace);
      }
      if (other.TxType != 0) {
        TxType = other.TxType;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (keyspace_ == null) {
              keyspace_ = new global::Ai.Grakn.Rpc.Generated.Keyspace();
            }
            input.ReadMessage(keyspace_);
            break;
          }
          case 16: {
            txType_ = (global::Ai.Grakn.Rpc.Generated.TxType) input.ReadEnum();
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Command to commit a transaction.
  ///After this message, the server will send a `Done` message and then accept a command message.
  /// </summary>
  public sealed partial class Commit : pb::IMessage<Commit> {
    private static readonly pb::MessageParser<Commit> _parser = new pb::MessageParser<Commit>(() => new Commit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Commit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit(Commit other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit Clone() {
      return new Commit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Commit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Commit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Commit other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///Command to start executing a query.
  ///After this message, the server will send an `Iterator` message and then accept a command message.
  /// </summary>
  public sealed partial class ExecQuery : pb::IMessage<ExecQuery> {
    private static readonly pb::MessageParser<ExecQuery> _parser = new pb::MessageParser<ExecQuery>(() => new ExecQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecQuery(ExecQuery other) : this() {
      Query = other.query_ != null ? other.Query.Clone() : null;
      Infer = other.infer_ != null ? other.Infer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecQuery Clone() {
      return new ExecQuery(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.Query query_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Query Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }

    /// <summary>Field number for the "infer" field.</summary>
    public const int InferFieldNumber = 2;
    private global::Ai.Grakn.Rpc.Generated.Infer infer_;
    /// <summary>
    /// If this is not present, leave at server default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Infer Infer {
      get { return infer_; }
      set {
        infer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Query, other.Query)) return false;
      if (!object.Equals(Infer, other.Infer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (query_ != null) hash ^= Query.GetHashCode();
      if (infer_ != null) hash ^= Infer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (query_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Query);
      }
      if (infer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Infer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (query_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (infer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Infer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecQuery other) {
      if (other == null) {
        return;
      }
      if (other.query_ != null) {
        if (query_ == null) {
          query_ = new global::Ai.Grakn.Rpc.Generated.Query();
        }
        Query.MergeFrom(other.Query);
      }
      if (other.infer_ != null) {
        if (infer_ == null) {
          infer_ = new global::Ai.Grakn.Rpc.Generated.Infer();
        }
        Infer.MergeFrom(other.Infer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (query_ == null) {
              query_ = new global::Ai.Grakn.Rpc.Generated.Query();
            }
            input.ReadMessage(query_);
            break;
          }
          case 18: {
            if (infer_ == null) {
              infer_ = new global::Ai.Grakn.Rpc.Generated.Infer();
            }
            input.ReadMessage(infer_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Run a concept method on a concept.
  ///After this message, the server will send a `ConceptResponse` message and then accept a command message.
  /// </summary>
  public sealed partial class RunConceptMethod : pb::IMessage<RunConceptMethod> {
    private static readonly pb::MessageParser<RunConceptMethod> _parser = new pb::MessageParser<RunConceptMethod>(() => new RunConceptMethod());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunConceptMethod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunConceptMethod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunConceptMethod(RunConceptMethod other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      ConceptMethod = other.conceptMethod_ != null ? other.ConceptMethod.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunConceptMethod Clone() {
      return new RunConceptMethod(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.ConceptId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.ConceptId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "conceptMethod" field.</summary>
    public const int ConceptMethodFieldNumber = 2;
    private global::Ai.Grakn.Rpc.Generated.ConceptMethod conceptMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.ConceptMethod ConceptMethod {
      get { return conceptMethod_; }
      set {
        conceptMethod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunConceptMethod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunConceptMethod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(ConceptMethod, other.ConceptMethod)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (conceptMethod_ != null) hash ^= ConceptMethod.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (conceptMethod_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConceptMethod);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (conceptMethod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConceptMethod);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunConceptMethod other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::Ai.Grakn.Rpc.Generated.ConceptId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.conceptMethod_ != null) {
        if (conceptMethod_ == null) {
          conceptMethod_ = new global::Ai.Grakn.Rpc.Generated.ConceptMethod();
        }
        ConceptMethod.MergeFrom(other.ConceptMethod);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::Ai.Grakn.Rpc.Generated.ConceptId();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (conceptMethod_ == null) {
              conceptMethod_ = new global::Ai.Grakn.Rpc.Generated.ConceptMethod();
            }
            input.ReadMessage(conceptMethod_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PutAttributeType : pb::IMessage<PutAttributeType> {
    private static readonly pb::MessageParser<PutAttributeType> _parser = new pb::MessageParser<PutAttributeType>(() => new PutAttributeType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutAttributeType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutAttributeType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutAttributeType(PutAttributeType other) : this() {
      Label = other.label_ != null ? other.Label.Clone() : null;
      dataType_ = other.dataType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutAttributeType Clone() {
      return new PutAttributeType(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.Label label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Label Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private global::Ai.Grakn.Rpc.Generated.DataType dataType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.DataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutAttributeType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutAttributeType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Label, other.Label)) return false;
      if (DataType != other.DataType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (label_ != null) hash ^= Label.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (label_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Label);
      }
      if (DataType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (label_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Label);
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutAttributeType other) {
      if (other == null) {
        return;
      }
      if (other.label_ != null) {
        if (label_ == null) {
          label_ = new global::Ai.Grakn.Rpc.Generated.Label();
        }
        Label.MergeFrom(other.Label);
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (label_ == null) {
              label_ = new global::Ai.Grakn.Rpc.Generated.Label();
            }
            input.ReadMessage(label_);
            break;
          }
          case 16: {
            dataType_ = (global::Ai.Grakn.Rpc.Generated.DataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PutRule : pb::IMessage<PutRule> {
    private static readonly pb::MessageParser<PutRule> _parser = new pb::MessageParser<PutRule>(() => new PutRule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRule(PutRule other) : this() {
      Label = other.label_ != null ? other.Label.Clone() : null;
      When = other.when_ != null ? other.When.Clone() : null;
      Then = other.then_ != null ? other.Then.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRule Clone() {
      return new PutRule(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.Label label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Label Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "when" field.</summary>
    public const int WhenFieldNumber = 2;
    private global::Ai.Grakn.Rpc.Generated.Pattern when_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Pattern When {
      get { return when_; }
      set {
        when_ = value;
      }
    }

    /// <summary>Field number for the "then" field.</summary>
    public const int ThenFieldNumber = 3;
    private global::Ai.Grakn.Rpc.Generated.Pattern then_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Pattern Then {
      get { return then_; }
      set {
        then_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Label, other.Label)) return false;
      if (!object.Equals(When, other.When)) return false;
      if (!object.Equals(Then, other.Then)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (label_ != null) hash ^= Label.GetHashCode();
      if (when_ != null) hash ^= When.GetHashCode();
      if (then_ != null) hash ^= Then.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (label_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Label);
      }
      if (when_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(When);
      }
      if (then_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Then);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (label_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Label);
      }
      if (when_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(When);
      }
      if (then_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Then);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutRule other) {
      if (other == null) {
        return;
      }
      if (other.label_ != null) {
        if (label_ == null) {
          label_ = new global::Ai.Grakn.Rpc.Generated.Label();
        }
        Label.MergeFrom(other.Label);
      }
      if (other.when_ != null) {
        if (when_ == null) {
          when_ = new global::Ai.Grakn.Rpc.Generated.Pattern();
        }
        When.MergeFrom(other.When);
      }
      if (other.then_ != null) {
        if (then_ == null) {
          then_ = new global::Ai.Grakn.Rpc.Generated.Pattern();
        }
        Then.MergeFrom(other.Then);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (label_ == null) {
              label_ = new global::Ai.Grakn.Rpc.Generated.Label();
            }
            input.ReadMessage(label_);
            break;
          }
          case 18: {
            if (when_ == null) {
              when_ = new global::Ai.Grakn.Rpc.Generated.Pattern();
            }
            input.ReadMessage(when_);
            break;
          }
          case 26: {
            if (then_ == null) {
              then_ = new global::Ai.Grakn.Rpc.Generated.Pattern();
            }
            input.ReadMessage(then_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Toggle inference for this query.
  /// </summary>
  public sealed partial class Infer : pb::IMessage<Infer> {
    private static readonly pb::MessageParser<Infer> _parser = new pb::MessageParser<Infer>(() => new Infer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Infer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Infer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Infer(Infer other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Infer Clone() {
      return new Infer(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Infer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Infer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Infer other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TxResponse : pb::IMessage<TxResponse> {
    private static readonly pb::MessageParser<TxResponse> _parser = new pb::MessageParser<TxResponse>(() => new TxResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxResponse(TxResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.QueryResult:
          QueryResult = other.QueryResult.Clone();
          break;
        case ResponseOneofCase.Done:
          Done = other.Done.Clone();
          break;
        case ResponseOneofCase.ConceptResponse:
          ConceptResponse = other.ConceptResponse.Clone();
          break;
        case ResponseOneofCase.IteratorId:
          IteratorId = other.IteratorId.Clone();
          break;
        case ResponseOneofCase.Concept:
          Concept = other.Concept.Clone();
          break;
        case ResponseOneofCase.OptionalConcept:
          OptionalConcept = other.OptionalConcept.Clone();
          break;
        case ResponseOneofCase.RolePlayer:
          RolePlayer = other.RolePlayer.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxResponse Clone() {
      return new TxResponse(this);
    }

    /// <summary>Field number for the "queryResult" field.</summary>
    public const int QueryResultFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.QueryResult QueryResult {
      get { return responseCase_ == ResponseOneofCase.QueryResult ? (global::Ai.Grakn.Rpc.Generated.QueryResult) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.QueryResult;
      }
    }

    /// <summary>Field number for the "done" field.</summary>
    public const int DoneFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Done Done {
      get { return responseCase_ == ResponseOneofCase.Done ? (global::Ai.Grakn.Rpc.Generated.Done) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Done;
      }
    }

    /// <summary>Field number for the "conceptResponse" field.</summary>
    public const int ConceptResponseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.ConceptResponse ConceptResponse {
      get { return responseCase_ == ResponseOneofCase.ConceptResponse ? (global::Ai.Grakn.Rpc.Generated.ConceptResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ConceptResponse;
      }
    }

    /// <summary>Field number for the "iteratorId" field.</summary>
    public const int IteratorIdFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.IteratorId IteratorId {
      get { return responseCase_ == ResponseOneofCase.IteratorId ? (global::Ai.Grakn.Rpc.Generated.IteratorId) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.IteratorId;
      }
    }

    /// <summary>Field number for the "concept" field.</summary>
    public const int ConceptFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept Concept {
      get { return responseCase_ == ResponseOneofCase.Concept ? (global::Ai.Grakn.Rpc.Generated.Concept) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Concept;
      }
    }

    /// <summary>Field number for the "optionalConcept" field.</summary>
    public const int OptionalConceptFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.OptionalConcept OptionalConcept {
      get { return responseCase_ == ResponseOneofCase.OptionalConcept ? (global::Ai.Grakn.Rpc.Generated.OptionalConcept) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.OptionalConcept;
      }
    }

    /// <summary>Field number for the "rolePlayer" field.</summary>
    public const int RolePlayerFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.RolePlayer RolePlayer {
      get { return responseCase_ == ResponseOneofCase.RolePlayer ? (global::Ai.Grakn.Rpc.Generated.RolePlayer) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.RolePlayer;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      QueryResult = 1,
      Done = 2,
      ConceptResponse = 3,
      IteratorId = 4,
      Concept = 5,
      OptionalConcept = 6,
      RolePlayer = 7,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryResult, other.QueryResult)) return false;
      if (!object.Equals(Done, other.Done)) return false;
      if (!object.Equals(ConceptResponse, other.ConceptResponse)) return false;
      if (!object.Equals(IteratorId, other.IteratorId)) return false;
      if (!object.Equals(Concept, other.Concept)) return false;
      if (!object.Equals(OptionalConcept, other.OptionalConcept)) return false;
      if (!object.Equals(RolePlayer, other.RolePlayer)) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.QueryResult) hash ^= QueryResult.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Done) hash ^= Done.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ConceptResponse) hash ^= ConceptResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.IteratorId) hash ^= IteratorId.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Concept) hash ^= Concept.GetHashCode();
      if (responseCase_ == ResponseOneofCase.OptionalConcept) hash ^= OptionalConcept.GetHashCode();
      if (responseCase_ == ResponseOneofCase.RolePlayer) hash ^= RolePlayer.GetHashCode();
      hash ^= (int) responseCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.QueryResult) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryResult);
      }
      if (responseCase_ == ResponseOneofCase.Done) {
        output.WriteRawTag(18);
        output.WriteMessage(Done);
      }
      if (responseCase_ == ResponseOneofCase.ConceptResponse) {
        output.WriteRawTag(26);
        output.WriteMessage(ConceptResponse);
      }
      if (responseCase_ == ResponseOneofCase.IteratorId) {
        output.WriteRawTag(34);
        output.WriteMessage(IteratorId);
      }
      if (responseCase_ == ResponseOneofCase.Concept) {
        output.WriteRawTag(42);
        output.WriteMessage(Concept);
      }
      if (responseCase_ == ResponseOneofCase.OptionalConcept) {
        output.WriteRawTag(50);
        output.WriteMessage(OptionalConcept);
      }
      if (responseCase_ == ResponseOneofCase.RolePlayer) {
        output.WriteRawTag(58);
        output.WriteMessage(RolePlayer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.QueryResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryResult);
      }
      if (responseCase_ == ResponseOneofCase.Done) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Done);
      }
      if (responseCase_ == ResponseOneofCase.ConceptResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConceptResponse);
      }
      if (responseCase_ == ResponseOneofCase.IteratorId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IteratorId);
      }
      if (responseCase_ == ResponseOneofCase.Concept) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Concept);
      }
      if (responseCase_ == ResponseOneofCase.OptionalConcept) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalConcept);
      }
      if (responseCase_ == ResponseOneofCase.RolePlayer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RolePlayer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.QueryResult:
          if (QueryResult == null) {
            QueryResult = new global::Ai.Grakn.Rpc.Generated.QueryResult();
          }
          QueryResult.MergeFrom(other.QueryResult);
          break;
        case ResponseOneofCase.Done:
          if (Done == null) {
            Done = new global::Ai.Grakn.Rpc.Generated.Done();
          }
          Done.MergeFrom(other.Done);
          break;
        case ResponseOneofCase.ConceptResponse:
          if (ConceptResponse == null) {
            ConceptResponse = new global::Ai.Grakn.Rpc.Generated.ConceptResponse();
          }
          ConceptResponse.MergeFrom(other.ConceptResponse);
          break;
        case ResponseOneofCase.IteratorId:
          if (IteratorId == null) {
            IteratorId = new global::Ai.Grakn.Rpc.Generated.IteratorId();
          }
          IteratorId.MergeFrom(other.IteratorId);
          break;
        case ResponseOneofCase.Concept:
          if (Concept == null) {
            Concept = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          Concept.MergeFrom(other.Concept);
          break;
        case ResponseOneofCase.OptionalConcept:
          if (OptionalConcept == null) {
            OptionalConcept = new global::Ai.Grakn.Rpc.Generated.OptionalConcept();
          }
          OptionalConcept.MergeFrom(other.OptionalConcept);
          break;
        case ResponseOneofCase.RolePlayer:
          if (RolePlayer == null) {
            RolePlayer = new global::Ai.Grakn.Rpc.Generated.RolePlayer();
          }
          RolePlayer.MergeFrom(other.RolePlayer);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ai.Grakn.Rpc.Generated.QueryResult subBuilder = new global::Ai.Grakn.Rpc.Generated.QueryResult();
            if (responseCase_ == ResponseOneofCase.QueryResult) {
              subBuilder.MergeFrom(QueryResult);
            }
            input.ReadMessage(subBuilder);
            QueryResult = subBuilder;
            break;
          }
          case 18: {
            global::Ai.Grakn.Rpc.Generated.Done subBuilder = new global::Ai.Grakn.Rpc.Generated.Done();
            if (responseCase_ == ResponseOneofCase.Done) {
              subBuilder.MergeFrom(Done);
            }
            input.ReadMessage(subBuilder);
            Done = subBuilder;
            break;
          }
          case 26: {
            global::Ai.Grakn.Rpc.Generated.ConceptResponse subBuilder = new global::Ai.Grakn.Rpc.Generated.ConceptResponse();
            if (responseCase_ == ResponseOneofCase.ConceptResponse) {
              subBuilder.MergeFrom(ConceptResponse);
            }
            input.ReadMessage(subBuilder);
            ConceptResponse = subBuilder;
            break;
          }
          case 34: {
            global::Ai.Grakn.Rpc.Generated.IteratorId subBuilder = new global::Ai.Grakn.Rpc.Generated.IteratorId();
            if (responseCase_ == ResponseOneofCase.IteratorId) {
              subBuilder.MergeFrom(IteratorId);
            }
            input.ReadMessage(subBuilder);
            IteratorId = subBuilder;
            break;
          }
          case 42: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (responseCase_ == ResponseOneofCase.Concept) {
              subBuilder.MergeFrom(Concept);
            }
            input.ReadMessage(subBuilder);
            Concept = subBuilder;
            break;
          }
          case 50: {
            global::Ai.Grakn.Rpc.Generated.OptionalConcept subBuilder = new global::Ai.Grakn.Rpc.Generated.OptionalConcept();
            if (responseCase_ == ResponseOneofCase.OptionalConcept) {
              subBuilder.MergeFrom(OptionalConcept);
            }
            input.ReadMessage(subBuilder);
            OptionalConcept = subBuilder;
            break;
          }
          case 58: {
            global::Ai.Grakn.Rpc.Generated.RolePlayer subBuilder = new global::Ai.Grakn.Rpc.Generated.RolePlayer();
            if (responseCase_ == ResponseOneofCase.RolePlayer) {
              subBuilder.MergeFrom(RolePlayer);
            }
            input.ReadMessage(subBuilder);
            RolePlayer = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryResult : pb::IMessage<QueryResult> {
    private static readonly pb::MessageParser<QueryResult> _parser = new pb::MessageParser<QueryResult>(() => new QueryResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult(QueryResult other) : this() {
      switch (other.QueryResultCase) {
        case QueryResultOneofCase.Answer:
          Answer = other.Answer.Clone();
          break;
        case QueryResultOneofCase.OtherResult:
          OtherResult = other.OtherResult;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult Clone() {
      return new QueryResult(this);
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Answer Answer {
      get { return queryResultCase_ == QueryResultOneofCase.Answer ? (global::Ai.Grakn.Rpc.Generated.Answer) queryResult_ : null; }
      set {
        queryResult_ = value;
        queryResultCase_ = value == null ? QueryResultOneofCase.None : QueryResultOneofCase.Answer;
      }
    }

    /// <summary>Field number for the "otherResult" field.</summary>
    public const int OtherResultFieldNumber = 2;
    /// <summary>
    /// This is used to represent `aggregate` and `compute` query results.
    /// These come in many different formats, so they are just returned
    /// as JSON strings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherResult {
      get { return queryResultCase_ == QueryResultOneofCase.OtherResult ? (string) queryResult_ : ""; }
      set {
        queryResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        queryResultCase_ = QueryResultOneofCase.OtherResult;
      }
    }

    private object queryResult_;
    /// <summary>Enum of possible cases for the "queryResult" oneof.</summary>
    public enum QueryResultOneofCase {
      None = 0,
      Answer = 1,
      OtherResult = 2,
    }
    private QueryResultOneofCase queryResultCase_ = QueryResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResultOneofCase QueryResultCase {
      get { return queryResultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQueryResult() {
      queryResultCase_ = QueryResultOneofCase.None;
      queryResult_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Answer, other.Answer)) return false;
      if (OtherResult != other.OtherResult) return false;
      if (QueryResultCase != other.QueryResultCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryResultCase_ == QueryResultOneofCase.Answer) hash ^= Answer.GetHashCode();
      if (queryResultCase_ == QueryResultOneofCase.OtherResult) hash ^= OtherResult.GetHashCode();
      hash ^= (int) queryResultCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (queryResultCase_ == QueryResultOneofCase.Answer) {
        output.WriteRawTag(10);
        output.WriteMessage(Answer);
      }
      if (queryResultCase_ == QueryResultOneofCase.OtherResult) {
        output.WriteRawTag(18);
        output.WriteString(OtherResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryResultCase_ == QueryResultOneofCase.Answer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Answer);
      }
      if (queryResultCase_ == QueryResultOneofCase.OtherResult) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryResult other) {
      if (other == null) {
        return;
      }
      switch (other.QueryResultCase) {
        case QueryResultOneofCase.Answer:
          if (Answer == null) {
            Answer = new global::Ai.Grakn.Rpc.Generated.Answer();
          }
          Answer.MergeFrom(other.Answer);
          break;
        case QueryResultOneofCase.OtherResult:
          OtherResult = other.OtherResult;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ai.Grakn.Rpc.Generated.Answer subBuilder = new global::Ai.Grakn.Rpc.Generated.Answer();
            if (queryResultCase_ == QueryResultOneofCase.Answer) {
              subBuilder.MergeFrom(Answer);
            }
            input.ReadMessage(subBuilder);
            Answer = subBuilder;
            break;
          }
          case 18: {
            OtherResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Tells the client we have completed their command.
  /// </summary>
  public sealed partial class Done : pb::IMessage<Done> {
    private static readonly pb::MessageParser<Done> _parser = new pb::MessageParser<Done>(() => new Done());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Done> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done(Done other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done Clone() {
      return new Done(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Done);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Done other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Done other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///Represents an answer to a `get`, `insert` or `define` query. e.g.
  ///
  ///```
  ///$x id V123; $y id V456;
  ///```
  ///is represented as:
  ///```
  ///Answer {
  ///"x": Concept { id: "V123" }
  ///"y": Concept { id: "V456" }
  ///}
  ///```
  /// </summary>
  public sealed partial class Answer : pb::IMessage<Answer> {
    private static readonly pb::MessageParser<Answer> _parser = new pb::MessageParser<Answer>(() => new Answer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Answer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer(Answer other) : this() {
      answer_ = other.answer_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer Clone() {
      return new Answer(this);
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int Answer_FieldNumber = 1;
    private static readonly pbc::MapField<string, global::Ai.Grakn.Rpc.Generated.Concept>.Codec _map_answer_codec
        = new pbc::MapField<string, global::Ai.Grakn.Rpc.Generated.Concept>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Ai.Grakn.Rpc.Generated.Concept.Parser), 10);
    private readonly pbc::MapField<string, global::Ai.Grakn.Rpc.Generated.Concept> answer_ = new pbc::MapField<string, global::Ai.Grakn.Rpc.Generated.Concept>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Ai.Grakn.Rpc.Generated.Concept> Answer_ {
      get { return answer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Answer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Answer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Answer_.Equals(other.Answer_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Answer_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      answer_.WriteTo(output, _map_answer_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += answer_.CalculateSize(_map_answer_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Answer other) {
      if (other == null) {
        return;
      }
      answer_.Add(other.answer_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            answer_.AddEntriesFrom(input, _map_answer_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Keyspace : pb::IMessage<Keyspace> {
    private static readonly pb::MessageParser<Keyspace> _parser = new pb::MessageParser<Keyspace>(() => new Keyspace());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Keyspace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keyspace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keyspace(Keyspace other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keyspace Clone() {
      return new Keyspace(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Keyspace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Keyspace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Keyspace other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Query : pb::IMessage<Query> {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
