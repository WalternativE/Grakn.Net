// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concept.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ai.Grakn.Rpc.Generated {

  /// <summary>Holder for reflection information generated from concept.proto</summary>
  public static partial class ConceptReflection {

    #region Descriptor
    /// <summary>File descriptor for concept.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConceptReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1jb25jZXB0LnByb3RvEhZhaS5ncmFrbi5ycGMuZ2VuZXJhdGVkGg5pdGVy",
            "YXRvci5wcm90byJsCgdDb25jZXB0Ei0KAmlkGAEgASgLMiEuYWkuZ3Jha24u",
            "cnBjLmdlbmVyYXRlZC5Db25jZXB0SWQSMgoIYmFzZVR5cGUYAiABKA4yIC5h",
            "aS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkJhc2VUeXBlIhoKCUNvbmNlcHRJZBIN",
            "CgV2YWx1ZRgBIAEoCSLJFwoNQ29uY2VwdE1ldGhvZBIuCgZkZWxldGUYECAB",
            "KAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlVuaXRIABIwCghnZXRMYWJl",
            "bBgDIAEoCzIcLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuVW5pdEgAEjEKCHNl",
            "dExhYmVsGBIgASgLMh0uYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5MYWJlbEgA",
            "EjIKCmlzSW1wbGljaXQYBCABKAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVk",
            "LlVuaXRIABI2Cg5nZXRTdWJDb25jZXB0cxgTIAEoCzIcLmFpLmdyYWtuLnJw",
            "Yy5nZW5lcmF0ZWQuVW5pdEgAEjgKEGdldFN1cGVyQ29uY2VwdHMYNSABKAsy",
            "HC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlVuaXRIABI9ChVnZXREaXJlY3RT",
            "dXBlckNvbmNlcHQYDiABKAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlVu",
            "aXRIABJAChVzZXREaXJlY3RTdXBlckNvbmNlcHQYESABKAsyHy5haS5ncmFr",
            "bi5ycGMuZ2VuZXJhdGVkLkNvbmNlcHRIABIvCgdnZXRXaGVuGAcgASgLMhwu",
            "YWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Vbml0SAASLwoHZ2V0VGhlbhgIIAEo",
            "CzIcLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuVW5pdEgAEkoKImdldFJlbGF0",
            "aW9uc2hpcFR5cGVzVGhhdFJlbGF0ZVJvbGUYFCABKAsyHC5haS5ncmFrbi5y",
            "cGMuZ2VuZXJhdGVkLlVuaXRIABI8ChRnZXRUeXBlc1RoYXRQbGF5Um9sZRgV",
            "IAEoCzIcLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuVW5pdEgAEjQKDGdldElu",
            "c3RhbmNlcxgeIAEoCzIcLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuVW5pdEgA",
            "EjkKEWdldEF0dHJpYnV0ZVR5cGVzGAsgASgLMhwuYWkuZ3Jha24ucnBjLmdl",
            "bmVyYXRlZC5Vbml0SAASOwoQc2V0QXR0cmlidXRlVHlwZRgZIAEoCzIfLmFp",
            "LmdyYWtuLnJwYy5nZW5lcmF0ZWQuQ29uY2VwdEgAEj0KEnVuc2V0QXR0cmli",
            "dXRlVHlwZRgaIAEoCzIfLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuQ29uY2Vw",
            "dEgAEjMKC2dldEtleVR5cGVzGAwgASgLMhwuYWkuZ3Jha24ucnBjLmdlbmVy",
            "YXRlZC5Vbml0SAASNQoKc2V0S2V5VHlwZRgbIAEoCzIfLmFpLmdyYWtuLnJw",
            "Yy5nZW5lcmF0ZWQuQ29uY2VwdEgAEjcKDHVuc2V0S2V5VHlwZRgcIAEoCzIf",
            "LmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuQ29uY2VwdEgAEjIKCmlzQWJzdHJh",
            "Y3QYBiABKAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlVuaXRIABIVCgtz",
            "ZXRBYnN0cmFjdBgWIAEoCEgAEjwKFGdldFJvbGVzUGxheWVkQnlUeXBlGB0g",
            "ASgLMhwuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Vbml0SAASPgoTc2V0Um9s",
            "ZVBsYXllZEJ5VHlwZRgXIAEoCzIfLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQu",
            "Q29uY2VwdEgAEkAKFXVuc2V0Um9sZVBsYXllZEJ5VHlwZRgYIAEoCzIfLmFp",
            "LmdyYWtuLnJwYy5nZW5lcmF0ZWQuQ29uY2VwdEgAEjEKCWFkZEVudGl0eRgi",
            "IAEoCzIcLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuVW5pdEgAEjcKD2dldFJl",
            "bGF0ZWRSb2xlcxgkIAEoCzIcLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuVW5p",
            "dEgAEjkKDnNldFJlbGF0ZWRSb2xlGCUgASgLMh8uYWkuZ3Jha24ucnBjLmdl",
            "bmVyYXRlZC5Db25jZXB0SAASOwoQdW5zZXRSZWxhdGVkUm9sZRgmIAEoCzIf",
            "LmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuQ29uY2VwdEgAEj4KDHB1dEF0dHJp",
            "YnV0ZRggIAEoCzImLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuQXR0cmlidXRl",
            "VmFsdWVIABI+CgxnZXRBdHRyaWJ1dGUYISABKAsyJi5haS5ncmFrbi5ycGMu",
            "Z2VuZXJhdGVkLkF0dHJpYnV0ZVZhbHVlSAASOQoRZ2V0RGF0YVR5cGVPZlR5",
            "cGUYAiABKAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlVuaXRIABI+ChZn",
            "ZXREYXRhVHlwZU9mQXR0cmlidXRlGDYgASgLMhwuYWkuZ3Jha24ucnBjLmdl",
            "bmVyYXRlZC5Vbml0SAASMAoIZ2V0UmVnZXgYCSABKAsyHC5haS5ncmFrbi5y",
            "cGMuZ2VuZXJhdGVkLlVuaXRIABI5CghzZXRSZWdleBgfIAEoCzIlLmFpLmdy",
            "YWtuLnJwYy5nZW5lcmF0ZWQuT3B0aW9uYWxSZWdleEgAEjIKCmlzSW5mZXJy",
            "ZWQYBSABKAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlVuaXRIABI1Cg1n",
            "ZXREaXJlY3RUeXBlGA0gASgLMhwuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5V",
            "bml0SAASOAoQZ2V0UmVsYXRpb25zaGlwcxgnIAEoCzIcLmFpLmdyYWtuLnJw",
            "Yy5nZW5lcmF0ZWQuVW5pdEgAEkMKF2dldFJlbGF0aW9uc2hpcHNCeVJvbGVz",
            "GDAgASgLMiAuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Db25jZXB0c0gAEj0K",
            "FWdldFJvbGVzUGxheWVkQnlUaGluZxgoIAEoCzIcLmFpLmdyYWtuLnJwYy5n",
            "ZW5lcmF0ZWQuVW5pdEgAEjUKDWdldEF0dHJpYnV0ZXMYKSABKAsyHC5haS5n",
            "cmFrbi5ycGMuZ2VuZXJhdGVkLlVuaXRIABJAChRnZXRBdHRyaWJ1dGVzQnlU",
            "eXBlcxgxIAEoCzIgLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuQ29uY2VwdHNI",
            "ABIvCgdnZXRLZXlzGCogASgLMhwuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5V",
            "bml0SAASOgoOZ2V0S2V5c0J5VHlwZXMYMiABKAsyIC5haS5ncmFrbi5ycGMu",
            "Z2VuZXJhdGVkLkNvbmNlcHRzSAASNwoMc2V0QXR0cmlidXRlGCsgASgLMh8u",
            "YWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Db25jZXB0SAASOQoOdW5zZXRBdHRy",
            "aWJ1dGUYLCABKAsyHy5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLkNvbmNlcHRI",
            "ABI3Cg9hZGRSZWxhdGlvbnNoaXAYIyABKAsyHC5haS5ncmFrbi5ycGMuZ2Vu",
            "ZXJhdGVkLlVuaXRIABI2Cg5nZXRSb2xlUGxheWVycxgKIAEoCzIcLmFpLmdy",
            "YWtuLnJwYy5nZW5lcmF0ZWQuVW5pdEgAEkEKFWdldFJvbGVQbGF5ZXJzQnlS",
            "b2xlcxgzIAEoCzIgLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuQ29uY2VwdHNI",
            "ABI7Cg1zZXRSb2xlUGxheWVyGC4gASgLMiIuYWkuZ3Jha24ucnBjLmdlbmVy",
            "YXRlZC5Sb2xlUGxheWVySAASPQoPdW5zZXRSb2xlUGxheWVyGA8gASgLMiIu",
            "YWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Sb2xlUGxheWVySAASMAoIZ2V0VmFs",
            "dWUYASABKAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlVuaXRIABIxCgln",
            "ZXRPd25lcnMYLyABKAsyHC5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLlVuaXRI",
            "AEIPCg1jb25jZXB0TWV0aG9kIgYKBFVuaXQijgUKD0NvbmNlcHRSZXNwb25z",
            "ZRJACg5hdHRyaWJ1dGVWYWx1ZRgBIAEoCzImLmFpLmdyYWtuLnJwYy5nZW5l",
            "cmF0ZWQuQXR0cmlidXRlVmFsdWVIABI0CghkYXRhVHlwZRgCIAEoDjIgLmFp",
            "LmdyYWtuLnJwYy5nZW5lcmF0ZWQuRGF0YVR5cGVIABIuCgVsYWJlbBgDIAEo",
            "CzIdLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuTGFiZWxIABIOCgRib29sGAQg",
            "ASgISAASQgoPb3B0aW9uYWxQYXR0ZXJuGAUgASgLMicuYWkuZ3Jha24ucnBj",
            "LmdlbmVyYXRlZC5PcHRpb25hbFBhdHRlcm5IABIQCgZzdHJpbmcYBiABKAlI",
            "ABIyCgdjb25jZXB0GAkgASgLMh8uYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5D",
            "b25jZXB0SAASLAoEdW5pdBgKIAEoCzIcLmFpLmdyYWtuLnJwYy5nZW5lcmF0",
            "ZWQuVW5pdEgAEj4KDW9wdGlvbmFsUmVnZXgYCyABKAsyJS5haS5ncmFrbi5y",
            "cGMuZ2VuZXJhdGVkLk9wdGlvbmFsUmVnZXhIABJCCg9vcHRpb25hbENvbmNl",
            "cHQYDCABKAsyJy5haS5ncmFrbi5ycGMuZ2VuZXJhdGVkLk9wdGlvbmFsQ29u",
            "Y2VwdEgAEkQKEG9wdGlvbmFsRGF0YVR5cGUYDSABKAsyKC5haS5ncmFrbi5y",
            "cGMuZ2VuZXJhdGVkLk9wdGlvbmFsRGF0YVR5cGVIABI4CgppdGVyYXRvcklk",
            "GA4gASgLMiIuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5JdGVyYXRvcklkSABC",
            "BwoFdmFsdWUilAEKDkF0dHJpYnV0ZVZhbHVlEhAKBnN0cmluZxgBIAEoCUgA",
            "EhEKB2Jvb2xlYW4YAiABKAhIABIRCgdpbnRlZ2VyGAMgASgFSAASDgoEbG9u",
            "ZxgEIAEoA0gAEg8KBWZsb2F0GAUgASgCSAASEAoGZG91YmxlGAYgASgBSAAS",
            "DgoEZGF0ZRgHIAEoA0gAQgcKBXZhbHVlIhYKBUxhYmVsEg0KBXZhbHVlGAEg",
            "ASgJIkUKC1JvbGVQbGF5ZXJzEjYKCnJvbGVQbGF5ZXIYASADKAsyIi5haS5n",
            "cmFrbi5ycGMuZ2VuZXJhdGVkLlJvbGVQbGF5ZXIibAoKUm9sZVBsYXllchIt",
            "CgRyb2xlGAEgASgLMh8uYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Db25jZXB0",
            "Ei8KBnBsYXllchgCIAEoCzIfLmFpLmdyYWtuLnJwYy5nZW5lcmF0ZWQuQ29u",
            "Y2VwdCI8CghDb25jZXB0cxIwCgdjb25jZXB0GAEgAygLMh8uYWkuZ3Jha24u",
            "cnBjLmdlbmVyYXRlZC5Db25jZXB0In4KD09wdGlvbmFsQ29uY2VwdBIyCgdw",
            "cmVzZW50GAEgASgLMh8uYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5Db25jZXB0",
            "SAASLgoGYWJzZW50GAIgASgLMhwuYWkuZ3Jha24ucnBjLmdlbmVyYXRlZC5V",
            "bml0SABCBwoFdmFsdWUiWwoNT3B0aW9uYWxSZWdleBIRCgdwcmVzZW50GAEg",
            "ASgJSAASLgoGYWJzZW50GAIgASgLMhwuYWkuZ3Jha24ucnBjLmdlbmVyYXRl",
            "ZC5Vbml0SABCBwoFdmFsdWUiGAoHUGF0dGVybhINCgV2YWx1ZRgBIAEoCSJ+",
            "Cg9PcHRpb25hbFBhdHRlcm4SMgoHcHJlc2VudBgBIAEoCzIfLmFpLmdyYWtu",
            "LnJwYy5nZW5lcmF0ZWQuUGF0dGVybkgAEi4KBmFic2VudBgCIAEoCzIcLmFp",
            "LmdyYWtuLnJwYy5nZW5lcmF0ZWQuVW5pdEgAQgcKBXZhbHVlIoABChBPcHRp",
            "b25hbERhdGFUeXBlEjMKB3ByZXNlbnQYASABKA4yIC5haS5ncmFrbi5ycGMu",
            "Z2VuZXJhdGVkLkRhdGFUeXBlSAASLgoGYWJzZW50GAIgASgLMhwuYWkuZ3Jh",
            "a24ucnBjLmdlbmVyYXRlZC5Vbml0SABCBwoFdmFsdWUqkgEKCEJhc2VUeXBl",
            "EgoKBkVudGl0eRAAEhAKDFJlbGF0aW9uc2hpcBABEg0KCUF0dHJpYnV0ZRAC",
            "Eg4KCkVudGl0eVR5cGUQAxIUChBSZWxhdGlvbnNoaXBUeXBlEAQSEQoNQXR0",
            "cmlidXRlVHlwZRAFEggKBFJvbGUQBhIICgRSdWxlEAcSDAoITWV0YVR5cGUQ",
            "CCpbCghEYXRhVHlwZRIKCgZTdHJpbmcQABILCgdCb29sZWFuEAESCwoHSW50",
            "ZWdlchACEggKBExvbmcQAxIJCgVGbG9hdBAEEgoKBkRvdWJsZRAFEggKBERh",
            "dGUQBkINQgtHcnBjQ29uY2VwdGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ai.Grakn.Rpc.Generated.IteratorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Ai.Grakn.Rpc.Generated.BaseType), typeof(global::Ai.Grakn.Rpc.Generated.DataType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Concept), global::Ai.Grakn.Rpc.Generated.Concept.Parser, new[]{ "Id", "BaseType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.ConceptId), global::Ai.Grakn.Rpc.Generated.ConceptId.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.ConceptMethod), global::Ai.Grakn.Rpc.Generated.ConceptMethod.Parser, new[]{ "Delete", "GetLabel", "SetLabel", "IsImplicit", "GetSubConcepts", "GetSuperConcepts", "GetDirectSuperConcept", "SetDirectSuperConcept", "GetWhen", "GetThen", "GetRelationshipTypesThatRelateRole", "GetTypesThatPlayRole", "GetInstances", "GetAttributeTypes", "SetAttributeType", "UnsetAttributeType", "GetKeyTypes", "SetKeyType", "UnsetKeyType", "IsAbstract", "SetAbstract", "GetRolesPlayedByType", "SetRolePlayedByType", "UnsetRolePlayedByType", "AddEntity", "GetRelatedRoles", "SetRelatedRole", "UnsetRelatedRole", "PutAttribute", "GetAttribute", "GetDataTypeOfType", "GetDataTypeOfAttribute", "GetRegex", "SetRegex", "IsInferred", "GetDirectType", "GetRelationships", "GetRelationshipsByRoles", "GetRolesPlayedByThing", "GetAttributes", "GetAttributesByTypes", "GetKeys", "GetKeysByTypes", "SetAttribute", "UnsetAttribute", "AddRelationship", "GetRolePlayers", "GetRolePlayersByRoles", "SetRolePlayer", "UnsetRolePlayer", "GetValue", "GetOwners" }, new[]{ "ConceptMethod" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Unit), global::Ai.Grakn.Rpc.Generated.Unit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.ConceptResponse), global::Ai.Grakn.Rpc.Generated.ConceptResponse.Parser, new[]{ "AttributeValue", "DataType", "Label", "Bool", "OptionalPattern", "String", "Concept", "Unit", "OptionalRegex", "OptionalConcept", "OptionalDataType", "IteratorId" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.AttributeValue), global::Ai.Grakn.Rpc.Generated.AttributeValue.Parser, new[]{ "String", "Boolean", "Integer", "Long", "Float", "Double", "Date" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Label), global::Ai.Grakn.Rpc.Generated.Label.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.RolePlayers), global::Ai.Grakn.Rpc.Generated.RolePlayers.Parser, new[]{ "RolePlayer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.RolePlayer), global::Ai.Grakn.Rpc.Generated.RolePlayer.Parser, new[]{ "Role", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Concepts), global::Ai.Grakn.Rpc.Generated.Concepts.Parser, new[]{ "Concept" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.OptionalConcept), global::Ai.Grakn.Rpc.Generated.OptionalConcept.Parser, new[]{ "Present", "Absent" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.OptionalRegex), global::Ai.Grakn.Rpc.Generated.OptionalRegex.Parser, new[]{ "Present", "Absent" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.Pattern), global::Ai.Grakn.Rpc.Generated.Pattern.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.OptionalPattern), global::Ai.Grakn.Rpc.Generated.OptionalPattern.Parser, new[]{ "Present", "Absent" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ai.Grakn.Rpc.Generated.OptionalDataType), global::Ai.Grakn.Rpc.Generated.OptionalDataType.Parser, new[]{ "Present", "Absent" }, new[]{ "Value" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BaseType {
    [pbr::OriginalName("Entity")] Entity = 0,
    [pbr::OriginalName("Relationship")] Relationship = 1,
    [pbr::OriginalName("Attribute")] Attribute = 2,
    [pbr::OriginalName("EntityType")] EntityType = 3,
    [pbr::OriginalName("RelationshipType")] RelationshipType = 4,
    [pbr::OriginalName("AttributeType")] AttributeType = 5,
    [pbr::OriginalName("Role")] Role = 6,
    [pbr::OriginalName("Rule")] Rule = 7,
    /// <summary>
    /// This represents the top-level meta type only
    /// </summary>
    [pbr::OriginalName("MetaType")] MetaType = 8,
  }

  public enum DataType {
    [pbr::OriginalName("String")] String = 0,
    [pbr::OriginalName("Boolean")] Boolean = 1,
    [pbr::OriginalName("Integer")] Integer = 2,
    [pbr::OriginalName("Long")] Long = 3,
    [pbr::OriginalName("Float")] Float = 4,
    [pbr::OriginalName("Double")] Double = 5,
    [pbr::OriginalName("Date")] Date = 6,
  }

  #endregion

  #region Messages
  public sealed partial class Concept : pb::IMessage<Concept> {
    private static readonly pb::MessageParser<Concept> _parser = new pb::MessageParser<Concept>(() => new Concept());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Concept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept(Concept other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      baseType_ = other.baseType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept Clone() {
      return new Concept(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.ConceptId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.ConceptId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "baseType" field.</summary>
    public const int BaseTypeFieldNumber = 2;
    private global::Ai.Grakn.Rpc.Generated.BaseType baseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.BaseType BaseType {
      get { return baseType_; }
      set {
        baseType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Concept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Concept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (BaseType != other.BaseType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (BaseType != 0) hash ^= BaseType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (BaseType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BaseType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (BaseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BaseType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Concept other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::Ai.Grakn.Rpc.Generated.ConceptId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.BaseType != 0) {
        BaseType = other.BaseType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::Ai.Grakn.Rpc.Generated.ConceptId();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            baseType_ = (global::Ai.Grakn.Rpc.Generated.BaseType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConceptId : pb::IMessage<ConceptId> {
    private static readonly pb::MessageParser<ConceptId> _parser = new pb::MessageParser<ConceptId>(() => new ConceptId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptId(ConceptId other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptId Clone() {
      return new ConceptId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptId other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConceptMethod : pb::IMessage<ConceptMethod> {
    private static readonly pb::MessageParser<ConceptMethod> _parser = new pb::MessageParser<ConceptMethod>(() => new ConceptMethod());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptMethod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptMethod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptMethod(ConceptMethod other) : this() {
      switch (other.ConceptMethodCase) {
        case ConceptMethodOneofCase.Delete:
          Delete = other.Delete.Clone();
          break;
        case ConceptMethodOneofCase.GetLabel:
          GetLabel = other.GetLabel.Clone();
          break;
        case ConceptMethodOneofCase.SetLabel:
          SetLabel = other.SetLabel.Clone();
          break;
        case ConceptMethodOneofCase.IsImplicit:
          IsImplicit = other.IsImplicit.Clone();
          break;
        case ConceptMethodOneofCase.GetSubConcepts:
          GetSubConcepts = other.GetSubConcepts.Clone();
          break;
        case ConceptMethodOneofCase.GetSuperConcepts:
          GetSuperConcepts = other.GetSuperConcepts.Clone();
          break;
        case ConceptMethodOneofCase.GetDirectSuperConcept:
          GetDirectSuperConcept = other.GetDirectSuperConcept.Clone();
          break;
        case ConceptMethodOneofCase.SetDirectSuperConcept:
          SetDirectSuperConcept = other.SetDirectSuperConcept.Clone();
          break;
        case ConceptMethodOneofCase.GetWhen:
          GetWhen = other.GetWhen.Clone();
          break;
        case ConceptMethodOneofCase.GetThen:
          GetThen = other.GetThen.Clone();
          break;
        case ConceptMethodOneofCase.GetRelationshipTypesThatRelateRole:
          GetRelationshipTypesThatRelateRole = other.GetRelationshipTypesThatRelateRole.Clone();
          break;
        case ConceptMethodOneofCase.GetTypesThatPlayRole:
          GetTypesThatPlayRole = other.GetTypesThatPlayRole.Clone();
          break;
        case ConceptMethodOneofCase.GetInstances:
          GetInstances = other.GetInstances.Clone();
          break;
        case ConceptMethodOneofCase.GetAttributeTypes:
          GetAttributeTypes = other.GetAttributeTypes.Clone();
          break;
        case ConceptMethodOneofCase.SetAttributeType:
          SetAttributeType = other.SetAttributeType.Clone();
          break;
        case ConceptMethodOneofCase.UnsetAttributeType:
          UnsetAttributeType = other.UnsetAttributeType.Clone();
          break;
        case ConceptMethodOneofCase.GetKeyTypes:
          GetKeyTypes = other.GetKeyTypes.Clone();
          break;
        case ConceptMethodOneofCase.SetKeyType:
          SetKeyType = other.SetKeyType.Clone();
          break;
        case ConceptMethodOneofCase.UnsetKeyType:
          UnsetKeyType = other.UnsetKeyType.Clone();
          break;
        case ConceptMethodOneofCase.IsAbstract:
          IsAbstract = other.IsAbstract.Clone();
          break;
        case ConceptMethodOneofCase.SetAbstract:
          SetAbstract = other.SetAbstract;
          break;
        case ConceptMethodOneofCase.GetRolesPlayedByType:
          GetRolesPlayedByType = other.GetRolesPlayedByType.Clone();
          break;
        case ConceptMethodOneofCase.SetRolePlayedByType:
          SetRolePlayedByType = other.SetRolePlayedByType.Clone();
          break;
        case ConceptMethodOneofCase.UnsetRolePlayedByType:
          UnsetRolePlayedByType = other.UnsetRolePlayedByType.Clone();
          break;
        case ConceptMethodOneofCase.AddEntity:
          AddEntity = other.AddEntity.Clone();
          break;
        case ConceptMethodOneofCase.GetRelatedRoles:
          GetRelatedRoles = other.GetRelatedRoles.Clone();
          break;
        case ConceptMethodOneofCase.SetRelatedRole:
          SetRelatedRole = other.SetRelatedRole.Clone();
          break;
        case ConceptMethodOneofCase.UnsetRelatedRole:
          UnsetRelatedRole = other.UnsetRelatedRole.Clone();
          break;
        case ConceptMethodOneofCase.PutAttribute:
          PutAttribute = other.PutAttribute.Clone();
          break;
        case ConceptMethodOneofCase.GetAttribute:
          GetAttribute = other.GetAttribute.Clone();
          break;
        case ConceptMethodOneofCase.GetDataTypeOfType:
          GetDataTypeOfType = other.GetDataTypeOfType.Clone();
          break;
        case ConceptMethodOneofCase.GetDataTypeOfAttribute:
          GetDataTypeOfAttribute = other.GetDataTypeOfAttribute.Clone();
          break;
        case ConceptMethodOneofCase.GetRegex:
          GetRegex = other.GetRegex.Clone();
          break;
        case ConceptMethodOneofCase.SetRegex:
          SetRegex = other.SetRegex.Clone();
          break;
        case ConceptMethodOneofCase.IsInferred:
          IsInferred = other.IsInferred.Clone();
          break;
        case ConceptMethodOneofCase.GetDirectType:
          GetDirectType = other.GetDirectType.Clone();
          break;
        case ConceptMethodOneofCase.GetRelationships:
          GetRelationships = other.GetRelationships.Clone();
          break;
        case ConceptMethodOneofCase.GetRelationshipsByRoles:
          GetRelationshipsByRoles = other.GetRelationshipsByRoles.Clone();
          break;
        case ConceptMethodOneofCase.GetRolesPlayedByThing:
          GetRolesPlayedByThing = other.GetRolesPlayedByThing.Clone();
          break;
        case ConceptMethodOneofCase.GetAttributes:
          GetAttributes = other.GetAttributes.Clone();
          break;
        case ConceptMethodOneofCase.GetAttributesByTypes:
          GetAttributesByTypes = other.GetAttributesByTypes.Clone();
          break;
        case ConceptMethodOneofCase.GetKeys:
          GetKeys = other.GetKeys.Clone();
          break;
        case ConceptMethodOneofCase.GetKeysByTypes:
          GetKeysByTypes = other.GetKeysByTypes.Clone();
          break;
        case ConceptMethodOneofCase.SetAttribute:
          SetAttribute = other.SetAttribute.Clone();
          break;
        case ConceptMethodOneofCase.UnsetAttribute:
          UnsetAttribute = other.UnsetAttribute.Clone();
          break;
        case ConceptMethodOneofCase.AddRelationship:
          AddRelationship = other.AddRelationship.Clone();
          break;
        case ConceptMethodOneofCase.GetRolePlayers:
          GetRolePlayers = other.GetRolePlayers.Clone();
          break;
        case ConceptMethodOneofCase.GetRolePlayersByRoles:
          GetRolePlayersByRoles = other.GetRolePlayersByRoles.Clone();
          break;
        case ConceptMethodOneofCase.SetRolePlayer:
          SetRolePlayer = other.SetRolePlayer.Clone();
          break;
        case ConceptMethodOneofCase.UnsetRolePlayer:
          UnsetRolePlayer = other.UnsetRolePlayer.Clone();
          break;
        case ConceptMethodOneofCase.GetValue:
          GetValue = other.GetValue.Clone();
          break;
        case ConceptMethodOneofCase.GetOwners:
          GetOwners = other.GetOwners.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptMethod Clone() {
      return new ConceptMethod(this);
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 16;
    /// <summary>
    /// Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit Delete {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.Delete ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.Delete;
      }
    }

    /// <summary>Field number for the "getLabel" field.</summary>
    public const int GetLabelFieldNumber = 3;
    /// <summary>
    /// Schema concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetLabel {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetLabel ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetLabel;
      }
    }

    /// <summary>Field number for the "setLabel" field.</summary>
    public const int SetLabelFieldNumber = 18;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Label SetLabel {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetLabel ? (global::Ai.Grakn.Rpc.Generated.Label) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetLabel;
      }
    }

    /// <summary>Field number for the "isImplicit" field.</summary>
    public const int IsImplicitFieldNumber = 4;
    /// <summary>
    /// returns bool
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit IsImplicit {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.IsImplicit ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.IsImplicit;
      }
    }

    /// <summary>Field number for the "getSubConcepts" field.</summary>
    public const int GetSubConceptsFieldNumber = 19;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetSubConcepts {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetSubConcepts ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetSubConcepts;
      }
    }

    /// <summary>Field number for the "getSuperConcepts" field.</summary>
    public const int GetSuperConceptsFieldNumber = 53;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetSuperConcepts {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetSuperConcepts ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetSuperConcepts;
      }
    }

    /// <summary>Field number for the "getDirectSuperConcept" field.</summary>
    public const int GetDirectSuperConceptFieldNumber = 14;
    /// <summary>
    /// returns OptionalConcept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetDirectSuperConcept {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetDirectSuperConcept ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetDirectSuperConcept;
      }
    }

    /// <summary>Field number for the "setDirectSuperConcept" field.</summary>
    public const int SetDirectSuperConceptFieldNumber = 17;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept SetDirectSuperConcept {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetDirectSuperConcept ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetDirectSuperConcept;
      }
    }

    /// <summary>Field number for the "getWhen" field.</summary>
    public const int GetWhenFieldNumber = 7;
    /// <summary>
    /// Rule
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetWhen {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetWhen ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetWhen;
      }
    }

    /// <summary>Field number for the "getThen" field.</summary>
    public const int GetThenFieldNumber = 8;
    /// <summary>
    /// returns OptionalPattern
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetThen {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetThen ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetThen;
      }
    }

    /// <summary>Field number for the "getRelationshipTypesThatRelateRole" field.</summary>
    public const int GetRelationshipTypesThatRelateRoleFieldNumber = 20;
    /// <summary>
    /// Role
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetRelationshipTypesThatRelateRole {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipTypesThatRelateRole ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRelationshipTypesThatRelateRole;
      }
    }

    /// <summary>Field number for the "getTypesThatPlayRole" field.</summary>
    public const int GetTypesThatPlayRoleFieldNumber = 21;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetTypesThatPlayRole {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetTypesThatPlayRole ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetTypesThatPlayRole;
      }
    }

    /// <summary>Field number for the "getInstances" field.</summary>
    public const int GetInstancesFieldNumber = 30;
    /// <summary>
    /// Type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetInstances {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetInstances ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetInstances;
      }
    }

    /// <summary>Field number for the "getAttributeTypes" field.</summary>
    public const int GetAttributeTypesFieldNumber = 11;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetAttributeTypes {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetAttributeTypes ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetAttributeTypes;
      }
    }

    /// <summary>Field number for the "setAttributeType" field.</summary>
    public const int SetAttributeTypeFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept SetAttributeType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetAttributeType ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetAttributeType;
      }
    }

    /// <summary>Field number for the "unsetAttributeType" field.</summary>
    public const int UnsetAttributeTypeFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept UnsetAttributeType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttributeType ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.UnsetAttributeType;
      }
    }

    /// <summary>Field number for the "getKeyTypes" field.</summary>
    public const int GetKeyTypesFieldNumber = 12;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetKeyTypes {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetKeyTypes ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetKeyTypes;
      }
    }

    /// <summary>Field number for the "setKeyType" field.</summary>
    public const int SetKeyTypeFieldNumber = 27;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept SetKeyType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetKeyType ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetKeyType;
      }
    }

    /// <summary>Field number for the "unsetKeyType" field.</summary>
    public const int UnsetKeyTypeFieldNumber = 28;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept UnsetKeyType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.UnsetKeyType ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.UnsetKeyType;
      }
    }

    /// <summary>Field number for the "isAbstract" field.</summary>
    public const int IsAbstractFieldNumber = 6;
    /// <summary>
    /// returns bool
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit IsAbstract {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.IsAbstract ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.IsAbstract;
      }
    }

    /// <summary>Field number for the "setAbstract" field.</summary>
    public const int SetAbstractFieldNumber = 22;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetAbstract {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetAbstract ? (bool) conceptMethod_ : false; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = ConceptMethodOneofCase.SetAbstract;
      }
    }

    /// <summary>Field number for the "getRolesPlayedByType" field.</summary>
    public const int GetRolesPlayedByTypeFieldNumber = 29;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetRolesPlayedByType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByType ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRolesPlayedByType;
      }
    }

    /// <summary>Field number for the "setRolePlayedByType" field.</summary>
    public const int SetRolePlayedByTypeFieldNumber = 23;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept SetRolePlayedByType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayedByType ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetRolePlayedByType;
      }
    }

    /// <summary>Field number for the "unsetRolePlayedByType" field.</summary>
    public const int UnsetRolePlayedByTypeFieldNumber = 24;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept UnsetRolePlayedByType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayedByType ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.UnsetRolePlayedByType;
      }
    }

    /// <summary>Field number for the "addEntity" field.</summary>
    public const int AddEntityFieldNumber = 34;
    /// <summary>
    /// Entity type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit AddEntity {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.AddEntity ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.AddEntity;
      }
    }

    /// <summary>Field number for the "getRelatedRoles" field.</summary>
    public const int GetRelatedRolesFieldNumber = 36;
    /// <summary>
    /// Relationship type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetRelatedRoles {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRelatedRoles ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRelatedRoles;
      }
    }

    /// <summary>Field number for the "setRelatedRole" field.</summary>
    public const int SetRelatedRoleFieldNumber = 37;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept SetRelatedRole {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetRelatedRole ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetRelatedRole;
      }
    }

    /// <summary>Field number for the "unsetRelatedRole" field.</summary>
    public const int UnsetRelatedRoleFieldNumber = 38;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept UnsetRelatedRole {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.UnsetRelatedRole ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.UnsetRelatedRole;
      }
    }

    /// <summary>Field number for the "putAttribute" field.</summary>
    public const int PutAttributeFieldNumber = 32;
    /// <summary>
    /// Attribute type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.AttributeValue PutAttribute {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.PutAttribute ? (global::Ai.Grakn.Rpc.Generated.AttributeValue) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.PutAttribute;
      }
    }

    /// <summary>Field number for the "getAttribute" field.</summary>
    public const int GetAttributeFieldNumber = 33;
    /// <summary>
    /// returns OptionalConcept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.AttributeValue GetAttribute {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetAttribute ? (global::Ai.Grakn.Rpc.Generated.AttributeValue) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetAttribute;
      }
    }

    /// <summary>Field number for the "getDataTypeOfType" field.</summary>
    public const int GetDataTypeOfTypeFieldNumber = 2;
    /// <summary>
    /// returns OptionalDataType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetDataTypeOfType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfType ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetDataTypeOfType;
      }
    }

    /// <summary>Field number for the "getDataTypeOfAttribute" field.</summary>
    public const int GetDataTypeOfAttributeFieldNumber = 54;
    /// <summary>
    /// returns DataType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetDataTypeOfAttribute {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfAttribute ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetDataTypeOfAttribute;
      }
    }

    /// <summary>Field number for the "getRegex" field.</summary>
    public const int GetRegexFieldNumber = 9;
    /// <summary>
    /// returns OptionalRegex
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetRegex {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRegex ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRegex;
      }
    }

    /// <summary>Field number for the "setRegex" field.</summary>
    public const int SetRegexFieldNumber = 31;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.OptionalRegex SetRegex {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetRegex ? (global::Ai.Grakn.Rpc.Generated.OptionalRegex) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetRegex;
      }
    }

    /// <summary>Field number for the "isInferred" field.</summary>
    public const int IsInferredFieldNumber = 5;
    /// <summary>
    /// Thing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit IsInferred {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.IsInferred ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.IsInferred;
      }
    }

    /// <summary>Field number for the "getDirectType" field.</summary>
    public const int GetDirectTypeFieldNumber = 13;
    /// <summary>
    /// returns Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetDirectType {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetDirectType ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetDirectType;
      }
    }

    /// <summary>Field number for the "getRelationships" field.</summary>
    public const int GetRelationshipsFieldNumber = 39;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetRelationships {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRelationships ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRelationships;
      }
    }

    /// <summary>Field number for the "getRelationshipsByRoles" field.</summary>
    public const int GetRelationshipsByRolesFieldNumber = 48;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concepts GetRelationshipsByRoles {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipsByRoles ? (global::Ai.Grakn.Rpc.Generated.Concepts) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRelationshipsByRoles;
      }
    }

    /// <summary>Field number for the "getRolesPlayedByThing" field.</summary>
    public const int GetRolesPlayedByThingFieldNumber = 40;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetRolesPlayedByThing {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByThing ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRolesPlayedByThing;
      }
    }

    /// <summary>Field number for the "getAttributes" field.</summary>
    public const int GetAttributesFieldNumber = 41;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetAttributes {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetAttributes ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetAttributes;
      }
    }

    /// <summary>Field number for the "getAttributesByTypes" field.</summary>
    public const int GetAttributesByTypesFieldNumber = 49;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concepts GetAttributesByTypes {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetAttributesByTypes ? (global::Ai.Grakn.Rpc.Generated.Concepts) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetAttributesByTypes;
      }
    }

    /// <summary>Field number for the "getKeys" field.</summary>
    public const int GetKeysFieldNumber = 42;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetKeys {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetKeys ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetKeys;
      }
    }

    /// <summary>Field number for the "getKeysByTypes" field.</summary>
    public const int GetKeysByTypesFieldNumber = 50;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concepts GetKeysByTypes {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetKeysByTypes ? (global::Ai.Grakn.Rpc.Generated.Concepts) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetKeysByTypes;
      }
    }

    /// <summary>Field number for the "setAttribute" field.</summary>
    public const int SetAttributeFieldNumber = 43;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept SetAttribute {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetAttribute ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetAttribute;
      }
    }

    /// <summary>Field number for the "unsetAttribute" field.</summary>
    public const int UnsetAttributeFieldNumber = 44;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept UnsetAttribute {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttribute ? (global::Ai.Grakn.Rpc.Generated.Concept) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.UnsetAttribute;
      }
    }

    /// <summary>Field number for the "addRelationship" field.</summary>
    public const int AddRelationshipFieldNumber = 35;
    /// <summary>
    /// Relationship
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit AddRelationship {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.AddRelationship ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.AddRelationship;
      }
    }

    /// <summary>Field number for the "getRolePlayers" field.</summary>
    public const int GetRolePlayersFieldNumber = 10;
    /// <summary>
    /// returns IteratorId of RolePlayer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetRolePlayers {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayers ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRolePlayers;
      }
    }

    /// <summary>Field number for the "getRolePlayersByRoles" field.</summary>
    public const int GetRolePlayersByRolesFieldNumber = 51;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concepts GetRolePlayersByRoles {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayersByRoles ? (global::Ai.Grakn.Rpc.Generated.Concepts) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetRolePlayersByRoles;
      }
    }

    /// <summary>Field number for the "setRolePlayer" field.</summary>
    public const int SetRolePlayerFieldNumber = 46;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.RolePlayer SetRolePlayer {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayer ? (global::Ai.Grakn.Rpc.Generated.RolePlayer) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.SetRolePlayer;
      }
    }

    /// <summary>Field number for the "unsetRolePlayer" field.</summary>
    public const int UnsetRolePlayerFieldNumber = 15;
    /// <summary>
    /// returns Unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.RolePlayer UnsetRolePlayer {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayer ? (global::Ai.Grakn.Rpc.Generated.RolePlayer) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.UnsetRolePlayer;
      }
    }

    /// <summary>Field number for the "getValue" field.</summary>
    public const int GetValueFieldNumber = 1;
    /// <summary>
    /// Attribute
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetValue {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetValue ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetValue;
      }
    }

    /// <summary>Field number for the "getOwners" field.</summary>
    public const int GetOwnersFieldNumber = 47;
    /// <summary>
    /// returns IteratorId of Concept
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit GetOwners {
      get { return conceptMethodCase_ == ConceptMethodOneofCase.GetOwners ? (global::Ai.Grakn.Rpc.Generated.Unit) conceptMethod_ : null; }
      set {
        conceptMethod_ = value;
        conceptMethodCase_ = value == null ? ConceptMethodOneofCase.None : ConceptMethodOneofCase.GetOwners;
      }
    }

    private object conceptMethod_;
    /// <summary>Enum of possible cases for the "conceptMethod" oneof.</summary>
    public enum ConceptMethodOneofCase {
      None = 0,
      Delete = 16,
      GetLabel = 3,
      SetLabel = 18,
      IsImplicit = 4,
      GetSubConcepts = 19,
      GetSuperConcepts = 53,
      GetDirectSuperConcept = 14,
      SetDirectSuperConcept = 17,
      GetWhen = 7,
      GetThen = 8,
      GetRelationshipTypesThatRelateRole = 20,
      GetTypesThatPlayRole = 21,
      GetInstances = 30,
      GetAttributeTypes = 11,
      SetAttributeType = 25,
      UnsetAttributeType = 26,
      GetKeyTypes = 12,
      SetKeyType = 27,
      UnsetKeyType = 28,
      IsAbstract = 6,
      SetAbstract = 22,
      GetRolesPlayedByType = 29,
      SetRolePlayedByType = 23,
      UnsetRolePlayedByType = 24,
      AddEntity = 34,
      GetRelatedRoles = 36,
      SetRelatedRole = 37,
      UnsetRelatedRole = 38,
      PutAttribute = 32,
      GetAttribute = 33,
      GetDataTypeOfType = 2,
      GetDataTypeOfAttribute = 54,
      GetRegex = 9,
      SetRegex = 31,
      IsInferred = 5,
      GetDirectType = 13,
      GetRelationships = 39,
      GetRelationshipsByRoles = 48,
      GetRolesPlayedByThing = 40,
      GetAttributes = 41,
      GetAttributesByTypes = 49,
      GetKeys = 42,
      GetKeysByTypes = 50,
      SetAttribute = 43,
      UnsetAttribute = 44,
      AddRelationship = 35,
      GetRolePlayers = 10,
      GetRolePlayersByRoles = 51,
      SetRolePlayer = 46,
      UnsetRolePlayer = 15,
      GetValue = 1,
      GetOwners = 47,
    }
    private ConceptMethodOneofCase conceptMethodCase_ = ConceptMethodOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptMethodOneofCase ConceptMethodCase {
      get { return conceptMethodCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConceptMethod() {
      conceptMethodCase_ = ConceptMethodOneofCase.None;
      conceptMethod_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptMethod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptMethod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Delete, other.Delete)) return false;
      if (!object.Equals(GetLabel, other.GetLabel)) return false;
      if (!object.Equals(SetLabel, other.SetLabel)) return false;
      if (!object.Equals(IsImplicit, other.IsImplicit)) return false;
      if (!object.Equals(GetSubConcepts, other.GetSubConcepts)) return false;
      if (!object.Equals(GetSuperConcepts, other.GetSuperConcepts)) return false;
      if (!object.Equals(GetDirectSuperConcept, other.GetDirectSuperConcept)) return false;
      if (!object.Equals(SetDirectSuperConcept, other.SetDirectSuperConcept)) return false;
      if (!object.Equals(GetWhen, other.GetWhen)) return false;
      if (!object.Equals(GetThen, other.GetThen)) return false;
      if (!object.Equals(GetRelationshipTypesThatRelateRole, other.GetRelationshipTypesThatRelateRole)) return false;
      if (!object.Equals(GetTypesThatPlayRole, other.GetTypesThatPlayRole)) return false;
      if (!object.Equals(GetInstances, other.GetInstances)) return false;
      if (!object.Equals(GetAttributeTypes, other.GetAttributeTypes)) return false;
      if (!object.Equals(SetAttributeType, other.SetAttributeType)) return false;
      if (!object.Equals(UnsetAttributeType, other.UnsetAttributeType)) return false;
      if (!object.Equals(GetKeyTypes, other.GetKeyTypes)) return false;
      if (!object.Equals(SetKeyType, other.SetKeyType)) return false;
      if (!object.Equals(UnsetKeyType, other.UnsetKeyType)) return false;
      if (!object.Equals(IsAbstract, other.IsAbstract)) return false;
      if (SetAbstract != other.SetAbstract) return false;
      if (!object.Equals(GetRolesPlayedByType, other.GetRolesPlayedByType)) return false;
      if (!object.Equals(SetRolePlayedByType, other.SetRolePlayedByType)) return false;
      if (!object.Equals(UnsetRolePlayedByType, other.UnsetRolePlayedByType)) return false;
      if (!object.Equals(AddEntity, other.AddEntity)) return false;
      if (!object.Equals(GetRelatedRoles, other.GetRelatedRoles)) return false;
      if (!object.Equals(SetRelatedRole, other.SetRelatedRole)) return false;
      if (!object.Equals(UnsetRelatedRole, other.UnsetRelatedRole)) return false;
      if (!object.Equals(PutAttribute, other.PutAttribute)) return false;
      if (!object.Equals(GetAttribute, other.GetAttribute)) return false;
      if (!object.Equals(GetDataTypeOfType, other.GetDataTypeOfType)) return false;
      if (!object.Equals(GetDataTypeOfAttribute, other.GetDataTypeOfAttribute)) return false;
      if (!object.Equals(GetRegex, other.GetRegex)) return false;
      if (!object.Equals(SetRegex, other.SetRegex)) return false;
      if (!object.Equals(IsInferred, other.IsInferred)) return false;
      if (!object.Equals(GetDirectType, other.GetDirectType)) return false;
      if (!object.Equals(GetRelationships, other.GetRelationships)) return false;
      if (!object.Equals(GetRelationshipsByRoles, other.GetRelationshipsByRoles)) return false;
      if (!object.Equals(GetRolesPlayedByThing, other.GetRolesPlayedByThing)) return false;
      if (!object.Equals(GetAttributes, other.GetAttributes)) return false;
      if (!object.Equals(GetAttributesByTypes, other.GetAttributesByTypes)) return false;
      if (!object.Equals(GetKeys, other.GetKeys)) return false;
      if (!object.Equals(GetKeysByTypes, other.GetKeysByTypes)) return false;
      if (!object.Equals(SetAttribute, other.SetAttribute)) return false;
      if (!object.Equals(UnsetAttribute, other.UnsetAttribute)) return false;
      if (!object.Equals(AddRelationship, other.AddRelationship)) return false;
      if (!object.Equals(GetRolePlayers, other.GetRolePlayers)) return false;
      if (!object.Equals(GetRolePlayersByRoles, other.GetRolePlayersByRoles)) return false;
      if (!object.Equals(SetRolePlayer, other.SetRolePlayer)) return false;
      if (!object.Equals(UnsetRolePlayer, other.UnsetRolePlayer)) return false;
      if (!object.Equals(GetValue, other.GetValue)) return false;
      if (!object.Equals(GetOwners, other.GetOwners)) return false;
      if (ConceptMethodCase != other.ConceptMethodCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conceptMethodCase_ == ConceptMethodOneofCase.Delete) hash ^= Delete.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetLabel) hash ^= GetLabel.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetLabel) hash ^= SetLabel.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsImplicit) hash ^= IsImplicit.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetSubConcepts) hash ^= GetSubConcepts.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetSuperConcepts) hash ^= GetSuperConcepts.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDirectSuperConcept) hash ^= GetDirectSuperConcept.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetDirectSuperConcept) hash ^= SetDirectSuperConcept.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetWhen) hash ^= GetWhen.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetThen) hash ^= GetThen.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipTypesThatRelateRole) hash ^= GetRelationshipTypesThatRelateRole.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetTypesThatPlayRole) hash ^= GetTypesThatPlayRole.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetInstances) hash ^= GetInstances.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributeTypes) hash ^= GetAttributeTypes.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAttributeType) hash ^= SetAttributeType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttributeType) hash ^= UnsetAttributeType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeyTypes) hash ^= GetKeyTypes.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetKeyType) hash ^= SetKeyType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetKeyType) hash ^= UnsetKeyType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsAbstract) hash ^= IsAbstract.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAbstract) hash ^= SetAbstract.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByType) hash ^= GetRolesPlayedByType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayedByType) hash ^= SetRolePlayedByType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayedByType) hash ^= UnsetRolePlayedByType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.AddEntity) hash ^= AddEntity.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelatedRoles) hash ^= GetRelatedRoles.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRelatedRole) hash ^= SetRelatedRole.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRelatedRole) hash ^= UnsetRelatedRole.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.PutAttribute) hash ^= PutAttribute.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttribute) hash ^= GetAttribute.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfType) hash ^= GetDataTypeOfType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfAttribute) hash ^= GetDataTypeOfAttribute.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRegex) hash ^= GetRegex.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRegex) hash ^= SetRegex.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsInferred) hash ^= IsInferred.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDirectType) hash ^= GetDirectType.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationships) hash ^= GetRelationships.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipsByRoles) hash ^= GetRelationshipsByRoles.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByThing) hash ^= GetRolesPlayedByThing.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributes) hash ^= GetAttributes.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributesByTypes) hash ^= GetAttributesByTypes.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeys) hash ^= GetKeys.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeysByTypes) hash ^= GetKeysByTypes.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAttribute) hash ^= SetAttribute.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttribute) hash ^= UnsetAttribute.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.AddRelationship) hash ^= AddRelationship.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayers) hash ^= GetRolePlayers.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayersByRoles) hash ^= GetRolePlayersByRoles.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayer) hash ^= SetRolePlayer.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayer) hash ^= UnsetRolePlayer.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetValue) hash ^= GetValue.GetHashCode();
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetOwners) hash ^= GetOwners.GetHashCode();
      hash ^= (int) conceptMethodCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetValue) {
        output.WriteRawTag(10);
        output.WriteMessage(GetValue);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfType) {
        output.WriteRawTag(18);
        output.WriteMessage(GetDataTypeOfType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetLabel) {
        output.WriteRawTag(26);
        output.WriteMessage(GetLabel);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsImplicit) {
        output.WriteRawTag(34);
        output.WriteMessage(IsImplicit);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsInferred) {
        output.WriteRawTag(42);
        output.WriteMessage(IsInferred);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsAbstract) {
        output.WriteRawTag(50);
        output.WriteMessage(IsAbstract);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetWhen) {
        output.WriteRawTag(58);
        output.WriteMessage(GetWhen);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetThen) {
        output.WriteRawTag(66);
        output.WriteMessage(GetThen);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRegex) {
        output.WriteRawTag(74);
        output.WriteMessage(GetRegex);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayers) {
        output.WriteRawTag(82);
        output.WriteMessage(GetRolePlayers);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributeTypes) {
        output.WriteRawTag(90);
        output.WriteMessage(GetAttributeTypes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeyTypes) {
        output.WriteRawTag(98);
        output.WriteMessage(GetKeyTypes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDirectType) {
        output.WriteRawTag(106);
        output.WriteMessage(GetDirectType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDirectSuperConcept) {
        output.WriteRawTag(114);
        output.WriteMessage(GetDirectSuperConcept);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayer) {
        output.WriteRawTag(122);
        output.WriteMessage(UnsetRolePlayer);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.Delete) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Delete);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetDirectSuperConcept) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(SetDirectSuperConcept);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetLabel) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SetLabel);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetSubConcepts) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(GetSubConcepts);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipTypesThatRelateRole) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(GetRelationshipTypesThatRelateRole);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetTypesThatPlayRole) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GetTypesThatPlayRole);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAbstract) {
        output.WriteRawTag(176, 1);
        output.WriteBool(SetAbstract);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayedByType) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SetRolePlayedByType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayedByType) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(UnsetRolePlayedByType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAttributeType) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(SetAttributeType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttributeType) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(UnsetAttributeType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetKeyType) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(SetKeyType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetKeyType) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(UnsetKeyType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByType) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(GetRolesPlayedByType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetInstances) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(GetInstances);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRegex) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(SetRegex);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.PutAttribute) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(PutAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttribute) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(GetAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.AddEntity) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(AddEntity);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.AddRelationship) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(AddRelationship);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelatedRoles) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(GetRelatedRoles);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRelatedRole) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(SetRelatedRole);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRelatedRole) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(UnsetRelatedRole);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationships) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(GetRelationships);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByThing) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(GetRolesPlayedByThing);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributes) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(GetAttributes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeys) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(GetKeys);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAttribute) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(SetAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttribute) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(UnsetAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayer) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(SetRolePlayer);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetOwners) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(GetOwners);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipsByRoles) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(GetRelationshipsByRoles);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributesByTypes) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(GetAttributesByTypes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeysByTypes) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(GetKeysByTypes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayersByRoles) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(GetRolePlayersByRoles);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetSuperConcepts) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(GetSuperConcepts);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfAttribute) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(GetDataTypeOfAttribute);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conceptMethodCase_ == ConceptMethodOneofCase.Delete) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetLabel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetLabel);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetLabel) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetLabel);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsImplicit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IsImplicit);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetSubConcepts) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetSubConcepts);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetSuperConcepts) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetSuperConcepts);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDirectSuperConcept) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetDirectSuperConcept);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetDirectSuperConcept) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetDirectSuperConcept);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetWhen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetWhen);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetThen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetThen);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipTypesThatRelateRole) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRelationshipTypesThatRelateRole);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetTypesThatPlayRole) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetTypesThatPlayRole);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetInstances) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetInstances);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributeTypes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAttributeTypes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAttributeType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetAttributeType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttributeType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnsetAttributeType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeyTypes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetKeyTypes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetKeyType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetKeyType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetKeyType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnsetKeyType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsAbstract) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IsAbstract);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAbstract) {
        size += 2 + 1;
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRolesPlayedByType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayedByType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetRolePlayedByType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayedByType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnsetRolePlayedByType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.AddEntity) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddEntity);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelatedRoles) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRelatedRoles);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRelatedRole) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetRelatedRole);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRelatedRole) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnsetRelatedRole);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.PutAttribute) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PutAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttribute) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetDataTypeOfType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfAttribute) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetDataTypeOfAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRegex) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRegex);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRegex) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetRegex);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.IsInferred) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IsInferred);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetDirectType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetDirectType);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationships) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRelationships);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipsByRoles) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRelationshipsByRoles);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByThing) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRolesPlayedByThing);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributes) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetAttributes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributesByTypes) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetAttributesByTypes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeys) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetKeys);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeysByTypes) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetKeysByTypes);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetAttribute) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttribute) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnsetAttribute);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.AddRelationship) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddRelationship);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayers) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRolePlayers);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayersByRoles) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetRolePlayersByRoles);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetRolePlayer);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnsetRolePlayer);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetValue);
      }
      if (conceptMethodCase_ == ConceptMethodOneofCase.GetOwners) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetOwners);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptMethod other) {
      if (other == null) {
        return;
      }
      switch (other.ConceptMethodCase) {
        case ConceptMethodOneofCase.Delete:
          if (Delete == null) {
            Delete = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          Delete.MergeFrom(other.Delete);
          break;
        case ConceptMethodOneofCase.GetLabel:
          if (GetLabel == null) {
            GetLabel = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetLabel.MergeFrom(other.GetLabel);
          break;
        case ConceptMethodOneofCase.SetLabel:
          if (SetLabel == null) {
            SetLabel = new global::Ai.Grakn.Rpc.Generated.Label();
          }
          SetLabel.MergeFrom(other.SetLabel);
          break;
        case ConceptMethodOneofCase.IsImplicit:
          if (IsImplicit == null) {
            IsImplicit = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          IsImplicit.MergeFrom(other.IsImplicit);
          break;
        case ConceptMethodOneofCase.GetSubConcepts:
          if (GetSubConcepts == null) {
            GetSubConcepts = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetSubConcepts.MergeFrom(other.GetSubConcepts);
          break;
        case ConceptMethodOneofCase.GetSuperConcepts:
          if (GetSuperConcepts == null) {
            GetSuperConcepts = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetSuperConcepts.MergeFrom(other.GetSuperConcepts);
          break;
        case ConceptMethodOneofCase.GetDirectSuperConcept:
          if (GetDirectSuperConcept == null) {
            GetDirectSuperConcept = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetDirectSuperConcept.MergeFrom(other.GetDirectSuperConcept);
          break;
        case ConceptMethodOneofCase.SetDirectSuperConcept:
          if (SetDirectSuperConcept == null) {
            SetDirectSuperConcept = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          SetDirectSuperConcept.MergeFrom(other.SetDirectSuperConcept);
          break;
        case ConceptMethodOneofCase.GetWhen:
          if (GetWhen == null) {
            GetWhen = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetWhen.MergeFrom(other.GetWhen);
          break;
        case ConceptMethodOneofCase.GetThen:
          if (GetThen == null) {
            GetThen = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetThen.MergeFrom(other.GetThen);
          break;
        case ConceptMethodOneofCase.GetRelationshipTypesThatRelateRole:
          if (GetRelationshipTypesThatRelateRole == null) {
            GetRelationshipTypesThatRelateRole = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetRelationshipTypesThatRelateRole.MergeFrom(other.GetRelationshipTypesThatRelateRole);
          break;
        case ConceptMethodOneofCase.GetTypesThatPlayRole:
          if (GetTypesThatPlayRole == null) {
            GetTypesThatPlayRole = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetTypesThatPlayRole.MergeFrom(other.GetTypesThatPlayRole);
          break;
        case ConceptMethodOneofCase.GetInstances:
          if (GetInstances == null) {
            GetInstances = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetInstances.MergeFrom(other.GetInstances);
          break;
        case ConceptMethodOneofCase.GetAttributeTypes:
          if (GetAttributeTypes == null) {
            GetAttributeTypes = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetAttributeTypes.MergeFrom(other.GetAttributeTypes);
          break;
        case ConceptMethodOneofCase.SetAttributeType:
          if (SetAttributeType == null) {
            SetAttributeType = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          SetAttributeType.MergeFrom(other.SetAttributeType);
          break;
        case ConceptMethodOneofCase.UnsetAttributeType:
          if (UnsetAttributeType == null) {
            UnsetAttributeType = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          UnsetAttributeType.MergeFrom(other.UnsetAttributeType);
          break;
        case ConceptMethodOneofCase.GetKeyTypes:
          if (GetKeyTypes == null) {
            GetKeyTypes = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetKeyTypes.MergeFrom(other.GetKeyTypes);
          break;
        case ConceptMethodOneofCase.SetKeyType:
          if (SetKeyType == null) {
            SetKeyType = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          SetKeyType.MergeFrom(other.SetKeyType);
          break;
        case ConceptMethodOneofCase.UnsetKeyType:
          if (UnsetKeyType == null) {
            UnsetKeyType = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          UnsetKeyType.MergeFrom(other.UnsetKeyType);
          break;
        case ConceptMethodOneofCase.IsAbstract:
          if (IsAbstract == null) {
            IsAbstract = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          IsAbstract.MergeFrom(other.IsAbstract);
          break;
        case ConceptMethodOneofCase.SetAbstract:
          SetAbstract = other.SetAbstract;
          break;
        case ConceptMethodOneofCase.GetRolesPlayedByType:
          if (GetRolesPlayedByType == null) {
            GetRolesPlayedByType = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetRolesPlayedByType.MergeFrom(other.GetRolesPlayedByType);
          break;
        case ConceptMethodOneofCase.SetRolePlayedByType:
          if (SetRolePlayedByType == null) {
            SetRolePlayedByType = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          SetRolePlayedByType.MergeFrom(other.SetRolePlayedByType);
          break;
        case ConceptMethodOneofCase.UnsetRolePlayedByType:
          if (UnsetRolePlayedByType == null) {
            UnsetRolePlayedByType = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          UnsetRolePlayedByType.MergeFrom(other.UnsetRolePlayedByType);
          break;
        case ConceptMethodOneofCase.AddEntity:
          if (AddEntity == null) {
            AddEntity = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          AddEntity.MergeFrom(other.AddEntity);
          break;
        case ConceptMethodOneofCase.GetRelatedRoles:
          if (GetRelatedRoles == null) {
            GetRelatedRoles = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetRelatedRoles.MergeFrom(other.GetRelatedRoles);
          break;
        case ConceptMethodOneofCase.SetRelatedRole:
          if (SetRelatedRole == null) {
            SetRelatedRole = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          SetRelatedRole.MergeFrom(other.SetRelatedRole);
          break;
        case ConceptMethodOneofCase.UnsetRelatedRole:
          if (UnsetRelatedRole == null) {
            UnsetRelatedRole = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          UnsetRelatedRole.MergeFrom(other.UnsetRelatedRole);
          break;
        case ConceptMethodOneofCase.PutAttribute:
          if (PutAttribute == null) {
            PutAttribute = new global::Ai.Grakn.Rpc.Generated.AttributeValue();
          }
          PutAttribute.MergeFrom(other.PutAttribute);
          break;
        case ConceptMethodOneofCase.GetAttribute:
          if (GetAttribute == null) {
            GetAttribute = new global::Ai.Grakn.Rpc.Generated.AttributeValue();
          }
          GetAttribute.MergeFrom(other.GetAttribute);
          break;
        case ConceptMethodOneofCase.GetDataTypeOfType:
          if (GetDataTypeOfType == null) {
            GetDataTypeOfType = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetDataTypeOfType.MergeFrom(other.GetDataTypeOfType);
          break;
        case ConceptMethodOneofCase.GetDataTypeOfAttribute:
          if (GetDataTypeOfAttribute == null) {
            GetDataTypeOfAttribute = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetDataTypeOfAttribute.MergeFrom(other.GetDataTypeOfAttribute);
          break;
        case ConceptMethodOneofCase.GetRegex:
          if (GetRegex == null) {
            GetRegex = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetRegex.MergeFrom(other.GetRegex);
          break;
        case ConceptMethodOneofCase.SetRegex:
          if (SetRegex == null) {
            SetRegex = new global::Ai.Grakn.Rpc.Generated.OptionalRegex();
          }
          SetRegex.MergeFrom(other.SetRegex);
          break;
        case ConceptMethodOneofCase.IsInferred:
          if (IsInferred == null) {
            IsInferred = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          IsInferred.MergeFrom(other.IsInferred);
          break;
        case ConceptMethodOneofCase.GetDirectType:
          if (GetDirectType == null) {
            GetDirectType = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetDirectType.MergeFrom(other.GetDirectType);
          break;
        case ConceptMethodOneofCase.GetRelationships:
          if (GetRelationships == null) {
            GetRelationships = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetRelationships.MergeFrom(other.GetRelationships);
          break;
        case ConceptMethodOneofCase.GetRelationshipsByRoles:
          if (GetRelationshipsByRoles == null) {
            GetRelationshipsByRoles = new global::Ai.Grakn.Rpc.Generated.Concepts();
          }
          GetRelationshipsByRoles.MergeFrom(other.GetRelationshipsByRoles);
          break;
        case ConceptMethodOneofCase.GetRolesPlayedByThing:
          if (GetRolesPlayedByThing == null) {
            GetRolesPlayedByThing = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetRolesPlayedByThing.MergeFrom(other.GetRolesPlayedByThing);
          break;
        case ConceptMethodOneofCase.GetAttributes:
          if (GetAttributes == null) {
            GetAttributes = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetAttributes.MergeFrom(other.GetAttributes);
          break;
        case ConceptMethodOneofCase.GetAttributesByTypes:
          if (GetAttributesByTypes == null) {
            GetAttributesByTypes = new global::Ai.Grakn.Rpc.Generated.Concepts();
          }
          GetAttributesByTypes.MergeFrom(other.GetAttributesByTypes);
          break;
        case ConceptMethodOneofCase.GetKeys:
          if (GetKeys == null) {
            GetKeys = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetKeys.MergeFrom(other.GetKeys);
          break;
        case ConceptMethodOneofCase.GetKeysByTypes:
          if (GetKeysByTypes == null) {
            GetKeysByTypes = new global::Ai.Grakn.Rpc.Generated.Concepts();
          }
          GetKeysByTypes.MergeFrom(other.GetKeysByTypes);
          break;
        case ConceptMethodOneofCase.SetAttribute:
          if (SetAttribute == null) {
            SetAttribute = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          SetAttribute.MergeFrom(other.SetAttribute);
          break;
        case ConceptMethodOneofCase.UnsetAttribute:
          if (UnsetAttribute == null) {
            UnsetAttribute = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          UnsetAttribute.MergeFrom(other.UnsetAttribute);
          break;
        case ConceptMethodOneofCase.AddRelationship:
          if (AddRelationship == null) {
            AddRelationship = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          AddRelationship.MergeFrom(other.AddRelationship);
          break;
        case ConceptMethodOneofCase.GetRolePlayers:
          if (GetRolePlayers == null) {
            GetRolePlayers = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetRolePlayers.MergeFrom(other.GetRolePlayers);
          break;
        case ConceptMethodOneofCase.GetRolePlayersByRoles:
          if (GetRolePlayersByRoles == null) {
            GetRolePlayersByRoles = new global::Ai.Grakn.Rpc.Generated.Concepts();
          }
          GetRolePlayersByRoles.MergeFrom(other.GetRolePlayersByRoles);
          break;
        case ConceptMethodOneofCase.SetRolePlayer:
          if (SetRolePlayer == null) {
            SetRolePlayer = new global::Ai.Grakn.Rpc.Generated.RolePlayer();
          }
          SetRolePlayer.MergeFrom(other.SetRolePlayer);
          break;
        case ConceptMethodOneofCase.UnsetRolePlayer:
          if (UnsetRolePlayer == null) {
            UnsetRolePlayer = new global::Ai.Grakn.Rpc.Generated.RolePlayer();
          }
          UnsetRolePlayer.MergeFrom(other.UnsetRolePlayer);
          break;
        case ConceptMethodOneofCase.GetValue:
          if (GetValue == null) {
            GetValue = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetValue.MergeFrom(other.GetValue);
          break;
        case ConceptMethodOneofCase.GetOwners:
          if (GetOwners == null) {
            GetOwners = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          GetOwners.MergeFrom(other.GetOwners);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetValue) {
              subBuilder.MergeFrom(GetValue);
            }
            input.ReadMessage(subBuilder);
            GetValue = subBuilder;
            break;
          }
          case 18: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfType) {
              subBuilder.MergeFrom(GetDataTypeOfType);
            }
            input.ReadMessage(subBuilder);
            GetDataTypeOfType = subBuilder;
            break;
          }
          case 26: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetLabel) {
              subBuilder.MergeFrom(GetLabel);
            }
            input.ReadMessage(subBuilder);
            GetLabel = subBuilder;
            break;
          }
          case 34: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.IsImplicit) {
              subBuilder.MergeFrom(IsImplicit);
            }
            input.ReadMessage(subBuilder);
            IsImplicit = subBuilder;
            break;
          }
          case 42: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.IsInferred) {
              subBuilder.MergeFrom(IsInferred);
            }
            input.ReadMessage(subBuilder);
            IsInferred = subBuilder;
            break;
          }
          case 50: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.IsAbstract) {
              subBuilder.MergeFrom(IsAbstract);
            }
            input.ReadMessage(subBuilder);
            IsAbstract = subBuilder;
            break;
          }
          case 58: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetWhen) {
              subBuilder.MergeFrom(GetWhen);
            }
            input.ReadMessage(subBuilder);
            GetWhen = subBuilder;
            break;
          }
          case 66: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetThen) {
              subBuilder.MergeFrom(GetThen);
            }
            input.ReadMessage(subBuilder);
            GetThen = subBuilder;
            break;
          }
          case 74: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRegex) {
              subBuilder.MergeFrom(GetRegex);
            }
            input.ReadMessage(subBuilder);
            GetRegex = subBuilder;
            break;
          }
          case 82: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayers) {
              subBuilder.MergeFrom(GetRolePlayers);
            }
            input.ReadMessage(subBuilder);
            GetRolePlayers = subBuilder;
            break;
          }
          case 90: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributeTypes) {
              subBuilder.MergeFrom(GetAttributeTypes);
            }
            input.ReadMessage(subBuilder);
            GetAttributeTypes = subBuilder;
            break;
          }
          case 98: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeyTypes) {
              subBuilder.MergeFrom(GetKeyTypes);
            }
            input.ReadMessage(subBuilder);
            GetKeyTypes = subBuilder;
            break;
          }
          case 106: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetDirectType) {
              subBuilder.MergeFrom(GetDirectType);
            }
            input.ReadMessage(subBuilder);
            GetDirectType = subBuilder;
            break;
          }
          case 114: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetDirectSuperConcept) {
              subBuilder.MergeFrom(GetDirectSuperConcept);
            }
            input.ReadMessage(subBuilder);
            GetDirectSuperConcept = subBuilder;
            break;
          }
          case 122: {
            global::Ai.Grakn.Rpc.Generated.RolePlayer subBuilder = new global::Ai.Grakn.Rpc.Generated.RolePlayer();
            if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayer) {
              subBuilder.MergeFrom(UnsetRolePlayer);
            }
            input.ReadMessage(subBuilder);
            UnsetRolePlayer = subBuilder;
            break;
          }
          case 130: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.Delete) {
              subBuilder.MergeFrom(Delete);
            }
            input.ReadMessage(subBuilder);
            Delete = subBuilder;
            break;
          }
          case 138: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetDirectSuperConcept) {
              subBuilder.MergeFrom(SetDirectSuperConcept);
            }
            input.ReadMessage(subBuilder);
            SetDirectSuperConcept = subBuilder;
            break;
          }
          case 146: {
            global::Ai.Grakn.Rpc.Generated.Label subBuilder = new global::Ai.Grakn.Rpc.Generated.Label();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetLabel) {
              subBuilder.MergeFrom(SetLabel);
            }
            input.ReadMessage(subBuilder);
            SetLabel = subBuilder;
            break;
          }
          case 154: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetSubConcepts) {
              subBuilder.MergeFrom(GetSubConcepts);
            }
            input.ReadMessage(subBuilder);
            GetSubConcepts = subBuilder;
            break;
          }
          case 162: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipTypesThatRelateRole) {
              subBuilder.MergeFrom(GetRelationshipTypesThatRelateRole);
            }
            input.ReadMessage(subBuilder);
            GetRelationshipTypesThatRelateRole = subBuilder;
            break;
          }
          case 170: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetTypesThatPlayRole) {
              subBuilder.MergeFrom(GetTypesThatPlayRole);
            }
            input.ReadMessage(subBuilder);
            GetTypesThatPlayRole = subBuilder;
            break;
          }
          case 176: {
            SetAbstract = input.ReadBool();
            break;
          }
          case 186: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayedByType) {
              subBuilder.MergeFrom(SetRolePlayedByType);
            }
            input.ReadMessage(subBuilder);
            SetRolePlayedByType = subBuilder;
            break;
          }
          case 194: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRolePlayedByType) {
              subBuilder.MergeFrom(UnsetRolePlayedByType);
            }
            input.ReadMessage(subBuilder);
            UnsetRolePlayedByType = subBuilder;
            break;
          }
          case 202: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetAttributeType) {
              subBuilder.MergeFrom(SetAttributeType);
            }
            input.ReadMessage(subBuilder);
            SetAttributeType = subBuilder;
            break;
          }
          case 210: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttributeType) {
              subBuilder.MergeFrom(UnsetAttributeType);
            }
            input.ReadMessage(subBuilder);
            UnsetAttributeType = subBuilder;
            break;
          }
          case 218: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetKeyType) {
              subBuilder.MergeFrom(SetKeyType);
            }
            input.ReadMessage(subBuilder);
            SetKeyType = subBuilder;
            break;
          }
          case 226: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetKeyType) {
              subBuilder.MergeFrom(UnsetKeyType);
            }
            input.ReadMessage(subBuilder);
            UnsetKeyType = subBuilder;
            break;
          }
          case 234: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByType) {
              subBuilder.MergeFrom(GetRolesPlayedByType);
            }
            input.ReadMessage(subBuilder);
            GetRolesPlayedByType = subBuilder;
            break;
          }
          case 242: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetInstances) {
              subBuilder.MergeFrom(GetInstances);
            }
            input.ReadMessage(subBuilder);
            GetInstances = subBuilder;
            break;
          }
          case 250: {
            global::Ai.Grakn.Rpc.Generated.OptionalRegex subBuilder = new global::Ai.Grakn.Rpc.Generated.OptionalRegex();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetRegex) {
              subBuilder.MergeFrom(SetRegex);
            }
            input.ReadMessage(subBuilder);
            SetRegex = subBuilder;
            break;
          }
          case 258: {
            global::Ai.Grakn.Rpc.Generated.AttributeValue subBuilder = new global::Ai.Grakn.Rpc.Generated.AttributeValue();
            if (conceptMethodCase_ == ConceptMethodOneofCase.PutAttribute) {
              subBuilder.MergeFrom(PutAttribute);
            }
            input.ReadMessage(subBuilder);
            PutAttribute = subBuilder;
            break;
          }
          case 266: {
            global::Ai.Grakn.Rpc.Generated.AttributeValue subBuilder = new global::Ai.Grakn.Rpc.Generated.AttributeValue();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttribute) {
              subBuilder.MergeFrom(GetAttribute);
            }
            input.ReadMessage(subBuilder);
            GetAttribute = subBuilder;
            break;
          }
          case 274: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.AddEntity) {
              subBuilder.MergeFrom(AddEntity);
            }
            input.ReadMessage(subBuilder);
            AddEntity = subBuilder;
            break;
          }
          case 282: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.AddRelationship) {
              subBuilder.MergeFrom(AddRelationship);
            }
            input.ReadMessage(subBuilder);
            AddRelationship = subBuilder;
            break;
          }
          case 290: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelatedRoles) {
              subBuilder.MergeFrom(GetRelatedRoles);
            }
            input.ReadMessage(subBuilder);
            GetRelatedRoles = subBuilder;
            break;
          }
          case 298: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetRelatedRole) {
              subBuilder.MergeFrom(SetRelatedRole);
            }
            input.ReadMessage(subBuilder);
            SetRelatedRole = subBuilder;
            break;
          }
          case 306: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetRelatedRole) {
              subBuilder.MergeFrom(UnsetRelatedRole);
            }
            input.ReadMessage(subBuilder);
            UnsetRelatedRole = subBuilder;
            break;
          }
          case 314: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationships) {
              subBuilder.MergeFrom(GetRelationships);
            }
            input.ReadMessage(subBuilder);
            GetRelationships = subBuilder;
            break;
          }
          case 322: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolesPlayedByThing) {
              subBuilder.MergeFrom(GetRolesPlayedByThing);
            }
            input.ReadMessage(subBuilder);
            GetRolesPlayedByThing = subBuilder;
            break;
          }
          case 330: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributes) {
              subBuilder.MergeFrom(GetAttributes);
            }
            input.ReadMessage(subBuilder);
            GetAttributes = subBuilder;
            break;
          }
          case 338: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeys) {
              subBuilder.MergeFrom(GetKeys);
            }
            input.ReadMessage(subBuilder);
            GetKeys = subBuilder;
            break;
          }
          case 346: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetAttribute) {
              subBuilder.MergeFrom(SetAttribute);
            }
            input.ReadMessage(subBuilder);
            SetAttribute = subBuilder;
            break;
          }
          case 354: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (conceptMethodCase_ == ConceptMethodOneofCase.UnsetAttribute) {
              subBuilder.MergeFrom(UnsetAttribute);
            }
            input.ReadMessage(subBuilder);
            UnsetAttribute = subBuilder;
            break;
          }
          case 370: {
            global::Ai.Grakn.Rpc.Generated.RolePlayer subBuilder = new global::Ai.Grakn.Rpc.Generated.RolePlayer();
            if (conceptMethodCase_ == ConceptMethodOneofCase.SetRolePlayer) {
              subBuilder.MergeFrom(SetRolePlayer);
            }
            input.ReadMessage(subBuilder);
            SetRolePlayer = subBuilder;
            break;
          }
          case 378: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetOwners) {
              subBuilder.MergeFrom(GetOwners);
            }
            input.ReadMessage(subBuilder);
            GetOwners = subBuilder;
            break;
          }
          case 386: {
            global::Ai.Grakn.Rpc.Generated.Concepts subBuilder = new global::Ai.Grakn.Rpc.Generated.Concepts();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRelationshipsByRoles) {
              subBuilder.MergeFrom(GetRelationshipsByRoles);
            }
            input.ReadMessage(subBuilder);
            GetRelationshipsByRoles = subBuilder;
            break;
          }
          case 394: {
            global::Ai.Grakn.Rpc.Generated.Concepts subBuilder = new global::Ai.Grakn.Rpc.Generated.Concepts();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetAttributesByTypes) {
              subBuilder.MergeFrom(GetAttributesByTypes);
            }
            input.ReadMessage(subBuilder);
            GetAttributesByTypes = subBuilder;
            break;
          }
          case 402: {
            global::Ai.Grakn.Rpc.Generated.Concepts subBuilder = new global::Ai.Grakn.Rpc.Generated.Concepts();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetKeysByTypes) {
              subBuilder.MergeFrom(GetKeysByTypes);
            }
            input.ReadMessage(subBuilder);
            GetKeysByTypes = subBuilder;
            break;
          }
          case 410: {
            global::Ai.Grakn.Rpc.Generated.Concepts subBuilder = new global::Ai.Grakn.Rpc.Generated.Concepts();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetRolePlayersByRoles) {
              subBuilder.MergeFrom(GetRolePlayersByRoles);
            }
            input.ReadMessage(subBuilder);
            GetRolePlayersByRoles = subBuilder;
            break;
          }
          case 426: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetSuperConcepts) {
              subBuilder.MergeFrom(GetSuperConcepts);
            }
            input.ReadMessage(subBuilder);
            GetSuperConcepts = subBuilder;
            break;
          }
          case 434: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (conceptMethodCase_ == ConceptMethodOneofCase.GetDataTypeOfAttribute) {
              subBuilder.MergeFrom(GetDataTypeOfAttribute);
            }
            input.ReadMessage(subBuilder);
            GetDataTypeOfAttribute = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a message with no information
  /// </summary>
  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit(Unit other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit Clone() {
      return new Unit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ConceptResponse : pb::IMessage<ConceptResponse> {
    private static readonly pb::MessageParser<ConceptResponse> _parser = new pb::MessageParser<ConceptResponse>(() => new ConceptResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptResponse(ConceptResponse other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.AttributeValue:
          AttributeValue = other.AttributeValue.Clone();
          break;
        case ValueOneofCase.DataType:
          DataType = other.DataType;
          break;
        case ValueOneofCase.Label:
          Label = other.Label.Clone();
          break;
        case ValueOneofCase.Bool:
          Bool = other.Bool;
          break;
        case ValueOneofCase.OptionalPattern:
          OptionalPattern = other.OptionalPattern.Clone();
          break;
        case ValueOneofCase.String:
          String = other.String;
          break;
        case ValueOneofCase.Concept:
          Concept = other.Concept.Clone();
          break;
        case ValueOneofCase.Unit:
          Unit = other.Unit.Clone();
          break;
        case ValueOneofCase.OptionalRegex:
          OptionalRegex = other.OptionalRegex.Clone();
          break;
        case ValueOneofCase.OptionalConcept:
          OptionalConcept = other.OptionalConcept.Clone();
          break;
        case ValueOneofCase.OptionalDataType:
          OptionalDataType = other.OptionalDataType.Clone();
          break;
        case ValueOneofCase.IteratorId:
          IteratorId = other.IteratorId.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptResponse Clone() {
      return new ConceptResponse(this);
    }

    /// <summary>Field number for the "attributeValue" field.</summary>
    public const int AttributeValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.AttributeValue AttributeValue {
      get { return valueCase_ == ValueOneofCase.AttributeValue ? (global::Ai.Grakn.Rpc.Generated.AttributeValue) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.AttributeValue;
      }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.DataType DataType {
      get { return valueCase_ == ValueOneofCase.DataType ? (global::Ai.Grakn.Rpc.Generated.DataType) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DataType;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Label Label {
      get { return valueCase_ == ValueOneofCase.Label ? (global::Ai.Grakn.Rpc.Generated.Label) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Label;
      }
    }

    /// <summary>Field number for the "bool" field.</summary>
    public const int BoolFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool {
      get { return valueCase_ == ValueOneofCase.Bool ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Bool;
      }
    }

    /// <summary>Field number for the "optionalPattern" field.</summary>
    public const int OptionalPatternFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.OptionalPattern OptionalPattern {
      get { return valueCase_ == ValueOneofCase.OptionalPattern ? (global::Ai.Grakn.Rpc.Generated.OptionalPattern) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.OptionalPattern;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string String {
      get { return valueCase_ == ValueOneofCase.String ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.String;
      }
    }

    /// <summary>Field number for the "concept" field.</summary>
    public const int ConceptFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept Concept {
      get { return valueCase_ == ValueOneofCase.Concept ? (global::Ai.Grakn.Rpc.Generated.Concept) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Concept;
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit Unit {
      get { return valueCase_ == ValueOneofCase.Unit ? (global::Ai.Grakn.Rpc.Generated.Unit) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Unit;
      }
    }

    /// <summary>Field number for the "optionalRegex" field.</summary>
    public const int OptionalRegexFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.OptionalRegex OptionalRegex {
      get { return valueCase_ == ValueOneofCase.OptionalRegex ? (global::Ai.Grakn.Rpc.Generated.OptionalRegex) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.OptionalRegex;
      }
    }

    /// <summary>Field number for the "optionalConcept" field.</summary>
    public const int OptionalConceptFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.OptionalConcept OptionalConcept {
      get { return valueCase_ == ValueOneofCase.OptionalConcept ? (global::Ai.Grakn.Rpc.Generated.OptionalConcept) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.OptionalConcept;
      }
    }

    /// <summary>Field number for the "optionalDataType" field.</summary>
    public const int OptionalDataTypeFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.OptionalDataType OptionalDataType {
      get { return valueCase_ == ValueOneofCase.OptionalDataType ? (global::Ai.Grakn.Rpc.Generated.OptionalDataType) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.OptionalDataType;
      }
    }

    /// <summary>Field number for the "iteratorId" field.</summary>
    public const int IteratorIdFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.IteratorId IteratorId {
      get { return valueCase_ == ValueOneofCase.IteratorId ? (global::Ai.Grakn.Rpc.Generated.IteratorId) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.IteratorId;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      AttributeValue = 1,
      DataType = 2,
      Label = 3,
      Bool = 4,
      OptionalPattern = 5,
      String = 6,
      Concept = 9,
      Unit = 10,
      OptionalRegex = 11,
      OptionalConcept = 12,
      OptionalDataType = 13,
      IteratorId = 14,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AttributeValue, other.AttributeValue)) return false;
      if (DataType != other.DataType) return false;
      if (!object.Equals(Label, other.Label)) return false;
      if (Bool != other.Bool) return false;
      if (!object.Equals(OptionalPattern, other.OptionalPattern)) return false;
      if (String != other.String) return false;
      if (!object.Equals(Concept, other.Concept)) return false;
      if (!object.Equals(Unit, other.Unit)) return false;
      if (!object.Equals(OptionalRegex, other.OptionalRegex)) return false;
      if (!object.Equals(OptionalConcept, other.OptionalConcept)) return false;
      if (!object.Equals(OptionalDataType, other.OptionalDataType)) return false;
      if (!object.Equals(IteratorId, other.IteratorId)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.AttributeValue) hash ^= AttributeValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.DataType) hash ^= DataType.GetHashCode();
      if (valueCase_ == ValueOneofCase.Label) hash ^= Label.GetHashCode();
      if (valueCase_ == ValueOneofCase.Bool) hash ^= Bool.GetHashCode();
      if (valueCase_ == ValueOneofCase.OptionalPattern) hash ^= OptionalPattern.GetHashCode();
      if (valueCase_ == ValueOneofCase.String) hash ^= String.GetHashCode();
      if (valueCase_ == ValueOneofCase.Concept) hash ^= Concept.GetHashCode();
      if (valueCase_ == ValueOneofCase.Unit) hash ^= Unit.GetHashCode();
      if (valueCase_ == ValueOneofCase.OptionalRegex) hash ^= OptionalRegex.GetHashCode();
      if (valueCase_ == ValueOneofCase.OptionalConcept) hash ^= OptionalConcept.GetHashCode();
      if (valueCase_ == ValueOneofCase.OptionalDataType) hash ^= OptionalDataType.GetHashCode();
      if (valueCase_ == ValueOneofCase.IteratorId) hash ^= IteratorId.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.AttributeValue) {
        output.WriteRawTag(10);
        output.WriteMessage(AttributeValue);
      }
      if (valueCase_ == ValueOneofCase.DataType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataType);
      }
      if (valueCase_ == ValueOneofCase.Label) {
        output.WriteRawTag(26);
        output.WriteMessage(Label);
      }
      if (valueCase_ == ValueOneofCase.Bool) {
        output.WriteRawTag(32);
        output.WriteBool(Bool);
      }
      if (valueCase_ == ValueOneofCase.OptionalPattern) {
        output.WriteRawTag(42);
        output.WriteMessage(OptionalPattern);
      }
      if (valueCase_ == ValueOneofCase.String) {
        output.WriteRawTag(50);
        output.WriteString(String);
      }
      if (valueCase_ == ValueOneofCase.Concept) {
        output.WriteRawTag(74);
        output.WriteMessage(Concept);
      }
      if (valueCase_ == ValueOneofCase.Unit) {
        output.WriteRawTag(82);
        output.WriteMessage(Unit);
      }
      if (valueCase_ == ValueOneofCase.OptionalRegex) {
        output.WriteRawTag(90);
        output.WriteMessage(OptionalRegex);
      }
      if (valueCase_ == ValueOneofCase.OptionalConcept) {
        output.WriteRawTag(98);
        output.WriteMessage(OptionalConcept);
      }
      if (valueCase_ == ValueOneofCase.OptionalDataType) {
        output.WriteRawTag(106);
        output.WriteMessage(OptionalDataType);
      }
      if (valueCase_ == ValueOneofCase.IteratorId) {
        output.WriteRawTag(114);
        output.WriteMessage(IteratorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.AttributeValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttributeValue);
      }
      if (valueCase_ == ValueOneofCase.DataType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (valueCase_ == ValueOneofCase.Label) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Label);
      }
      if (valueCase_ == ValueOneofCase.Bool) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.OptionalPattern) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalPattern);
      }
      if (valueCase_ == ValueOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
      }
      if (valueCase_ == ValueOneofCase.Concept) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Concept);
      }
      if (valueCase_ == ValueOneofCase.Unit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unit);
      }
      if (valueCase_ == ValueOneofCase.OptionalRegex) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalRegex);
      }
      if (valueCase_ == ValueOneofCase.OptionalConcept) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalConcept);
      }
      if (valueCase_ == ValueOneofCase.OptionalDataType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalDataType);
      }
      if (valueCase_ == ValueOneofCase.IteratorId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IteratorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.AttributeValue:
          if (AttributeValue == null) {
            AttributeValue = new global::Ai.Grakn.Rpc.Generated.AttributeValue();
          }
          AttributeValue.MergeFrom(other.AttributeValue);
          break;
        case ValueOneofCase.DataType:
          DataType = other.DataType;
          break;
        case ValueOneofCase.Label:
          if (Label == null) {
            Label = new global::Ai.Grakn.Rpc.Generated.Label();
          }
          Label.MergeFrom(other.Label);
          break;
        case ValueOneofCase.Bool:
          Bool = other.Bool;
          break;
        case ValueOneofCase.OptionalPattern:
          if (OptionalPattern == null) {
            OptionalPattern = new global::Ai.Grakn.Rpc.Generated.OptionalPattern();
          }
          OptionalPattern.MergeFrom(other.OptionalPattern);
          break;
        case ValueOneofCase.String:
          String = other.String;
          break;
        case ValueOneofCase.Concept:
          if (Concept == null) {
            Concept = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          Concept.MergeFrom(other.Concept);
          break;
        case ValueOneofCase.Unit:
          if (Unit == null) {
            Unit = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          Unit.MergeFrom(other.Unit);
          break;
        case ValueOneofCase.OptionalRegex:
          if (OptionalRegex == null) {
            OptionalRegex = new global::Ai.Grakn.Rpc.Generated.OptionalRegex();
          }
          OptionalRegex.MergeFrom(other.OptionalRegex);
          break;
        case ValueOneofCase.OptionalConcept:
          if (OptionalConcept == null) {
            OptionalConcept = new global::Ai.Grakn.Rpc.Generated.OptionalConcept();
          }
          OptionalConcept.MergeFrom(other.OptionalConcept);
          break;
        case ValueOneofCase.OptionalDataType:
          if (OptionalDataType == null) {
            OptionalDataType = new global::Ai.Grakn.Rpc.Generated.OptionalDataType();
          }
          OptionalDataType.MergeFrom(other.OptionalDataType);
          break;
        case ValueOneofCase.IteratorId:
          if (IteratorId == null) {
            IteratorId = new global::Ai.Grakn.Rpc.Generated.IteratorId();
          }
          IteratorId.MergeFrom(other.IteratorId);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ai.Grakn.Rpc.Generated.AttributeValue subBuilder = new global::Ai.Grakn.Rpc.Generated.AttributeValue();
            if (valueCase_ == ValueOneofCase.AttributeValue) {
              subBuilder.MergeFrom(AttributeValue);
            }
            input.ReadMessage(subBuilder);
            AttributeValue = subBuilder;
            break;
          }
          case 16: {
            value_ = input.ReadEnum();
            valueCase_ = ValueOneofCase.DataType;
            break;
          }
          case 26: {
            global::Ai.Grakn.Rpc.Generated.Label subBuilder = new global::Ai.Grakn.Rpc.Generated.Label();
            if (valueCase_ == ValueOneofCase.Label) {
              subBuilder.MergeFrom(Label);
            }
            input.ReadMessage(subBuilder);
            Label = subBuilder;
            break;
          }
          case 32: {
            Bool = input.ReadBool();
            break;
          }
          case 42: {
            global::Ai.Grakn.Rpc.Generated.OptionalPattern subBuilder = new global::Ai.Grakn.Rpc.Generated.OptionalPattern();
            if (valueCase_ == ValueOneofCase.OptionalPattern) {
              subBuilder.MergeFrom(OptionalPattern);
            }
            input.ReadMessage(subBuilder);
            OptionalPattern = subBuilder;
            break;
          }
          case 50: {
            String = input.ReadString();
            break;
          }
          case 74: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (valueCase_ == ValueOneofCase.Concept) {
              subBuilder.MergeFrom(Concept);
            }
            input.ReadMessage(subBuilder);
            Concept = subBuilder;
            break;
          }
          case 82: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (valueCase_ == ValueOneofCase.Unit) {
              subBuilder.MergeFrom(Unit);
            }
            input.ReadMessage(subBuilder);
            Unit = subBuilder;
            break;
          }
          case 90: {
            global::Ai.Grakn.Rpc.Generated.OptionalRegex subBuilder = new global::Ai.Grakn.Rpc.Generated.OptionalRegex();
            if (valueCase_ == ValueOneofCase.OptionalRegex) {
              subBuilder.MergeFrom(OptionalRegex);
            }
            input.ReadMessage(subBuilder);
            OptionalRegex = subBuilder;
            break;
          }
          case 98: {
            global::Ai.Grakn.Rpc.Generated.OptionalConcept subBuilder = new global::Ai.Grakn.Rpc.Generated.OptionalConcept();
            if (valueCase_ == ValueOneofCase.OptionalConcept) {
              subBuilder.MergeFrom(OptionalConcept);
            }
            input.ReadMessage(subBuilder);
            OptionalConcept = subBuilder;
            break;
          }
          case 106: {
            global::Ai.Grakn.Rpc.Generated.OptionalDataType subBuilder = new global::Ai.Grakn.Rpc.Generated.OptionalDataType();
            if (valueCase_ == ValueOneofCase.OptionalDataType) {
              subBuilder.MergeFrom(OptionalDataType);
            }
            input.ReadMessage(subBuilder);
            OptionalDataType = subBuilder;
            break;
          }
          case 114: {
            global::Ai.Grakn.Rpc.Generated.IteratorId subBuilder = new global::Ai.Grakn.Rpc.Generated.IteratorId();
            if (valueCase_ == ValueOneofCase.IteratorId) {
              subBuilder.MergeFrom(IteratorId);
            }
            input.ReadMessage(subBuilder);
            IteratorId = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeValue : pb::IMessage<AttributeValue> {
    private static readonly pb::MessageParser<AttributeValue> _parser = new pb::MessageParser<AttributeValue>(() => new AttributeValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValue(AttributeValue other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.String:
          String = other.String;
          break;
        case ValueOneofCase.Boolean:
          Boolean = other.Boolean;
          break;
        case ValueOneofCase.Integer:
          Integer = other.Integer;
          break;
        case ValueOneofCase.Long:
          Long = other.Long;
          break;
        case ValueOneofCase.Float:
          Float = other.Float;
          break;
        case ValueOneofCase.Double:
          Double = other.Double;
          break;
        case ValueOneofCase.Date:
          Date = other.Date;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValue Clone() {
      return new AttributeValue(this);
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string String {
      get { return valueCase_ == ValueOneofCase.String ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.String;
      }
    }

    /// <summary>Field number for the "boolean" field.</summary>
    public const int BooleanFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Boolean {
      get { return valueCase_ == ValueOneofCase.Boolean ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Boolean;
      }
    }

    /// <summary>Field number for the "integer" field.</summary>
    public const int IntegerFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integer {
      get { return valueCase_ == ValueOneofCase.Integer ? (int) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Integer;
      }
    }

    /// <summary>Field number for the "long" field.</summary>
    public const int LongFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Long {
      get { return valueCase_ == ValueOneofCase.Long ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Long;
      }
    }

    /// <summary>Field number for the "float" field.</summary>
    public const int FloatFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Float {
      get { return valueCase_ == ValueOneofCase.Float ? (float) value_ : 0F; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Float;
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Double {
      get { return valueCase_ == ValueOneofCase.Double ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Double;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 7;
    /// <summary>
    /// time since epoch in milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Date {
      get { return valueCase_ == ValueOneofCase.Date ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Date;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      String = 1,
      Boolean = 2,
      Integer = 3,
      Long = 4,
      Float = 5,
      Double = 6,
      Date = 7,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (String != other.String) return false;
      if (Boolean != other.Boolean) return false;
      if (Integer != other.Integer) return false;
      if (Long != other.Long) return false;
      if (Float != other.Float) return false;
      if (Double != other.Double) return false;
      if (Date != other.Date) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.String) hash ^= String.GetHashCode();
      if (valueCase_ == ValueOneofCase.Boolean) hash ^= Boolean.GetHashCode();
      if (valueCase_ == ValueOneofCase.Integer) hash ^= Integer.GetHashCode();
      if (valueCase_ == ValueOneofCase.Long) hash ^= Long.GetHashCode();
      if (valueCase_ == ValueOneofCase.Float) hash ^= Float.GetHashCode();
      if (valueCase_ == ValueOneofCase.Double) hash ^= Double.GetHashCode();
      if (valueCase_ == ValueOneofCase.Date) hash ^= Date.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.String) {
        output.WriteRawTag(10);
        output.WriteString(String);
      }
      if (valueCase_ == ValueOneofCase.Boolean) {
        output.WriteRawTag(16);
        output.WriteBool(Boolean);
      }
      if (valueCase_ == ValueOneofCase.Integer) {
        output.WriteRawTag(24);
        output.WriteInt32(Integer);
      }
      if (valueCase_ == ValueOneofCase.Long) {
        output.WriteRawTag(32);
        output.WriteInt64(Long);
      }
      if (valueCase_ == ValueOneofCase.Float) {
        output.WriteRawTag(45);
        output.WriteFloat(Float);
      }
      if (valueCase_ == ValueOneofCase.Double) {
        output.WriteRawTag(49);
        output.WriteDouble(Double);
      }
      if (valueCase_ == ValueOneofCase.Date) {
        output.WriteRawTag(56);
        output.WriteInt64(Date);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
      }
      if (valueCase_ == ValueOneofCase.Boolean) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.Integer) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integer);
      }
      if (valueCase_ == ValueOneofCase.Long) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Long);
      }
      if (valueCase_ == ValueOneofCase.Float) {
        size += 1 + 4;
      }
      if (valueCase_ == ValueOneofCase.Double) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.Date) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Date);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeValue other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.String:
          String = other.String;
          break;
        case ValueOneofCase.Boolean:
          Boolean = other.Boolean;
          break;
        case ValueOneofCase.Integer:
          Integer = other.Integer;
          break;
        case ValueOneofCase.Long:
          Long = other.Long;
          break;
        case ValueOneofCase.Float:
          Float = other.Float;
          break;
        case ValueOneofCase.Double:
          Double = other.Double;
          break;
        case ValueOneofCase.Date:
          Date = other.Date;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            String = input.ReadString();
            break;
          }
          case 16: {
            Boolean = input.ReadBool();
            break;
          }
          case 24: {
            Integer = input.ReadInt32();
            break;
          }
          case 32: {
            Long = input.ReadInt64();
            break;
          }
          case 45: {
            Float = input.ReadFloat();
            break;
          }
          case 49: {
            Double = input.ReadDouble();
            break;
          }
          case 56: {
            Date = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Label : pb::IMessage<Label> {
    private static readonly pb::MessageParser<Label> _parser = new pb::MessageParser<Label>(() => new Label());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Label> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label(Label other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label Clone() {
      return new Label(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Label);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Label other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Label other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RolePlayers : pb::IMessage<RolePlayers> {
    private static readonly pb::MessageParser<RolePlayers> _parser = new pb::MessageParser<RolePlayers>(() => new RolePlayers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RolePlayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePlayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePlayers(RolePlayers other) : this() {
      rolePlayer_ = other.rolePlayer_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePlayers Clone() {
      return new RolePlayers(this);
    }

    /// <summary>Field number for the "rolePlayer" field.</summary>
    public const int RolePlayerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Ai.Grakn.Rpc.Generated.RolePlayer> _repeated_rolePlayer_codec
        = pb::FieldCodec.ForMessage(10, global::Ai.Grakn.Rpc.Generated.RolePlayer.Parser);
    private readonly pbc::RepeatedField<global::Ai.Grakn.Rpc.Generated.RolePlayer> rolePlayer_ = new pbc::RepeatedField<global::Ai.Grakn.Rpc.Generated.RolePlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ai.Grakn.Rpc.Generated.RolePlayer> RolePlayer {
      get { return rolePlayer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RolePlayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RolePlayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rolePlayer_.Equals(other.rolePlayer_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rolePlayer_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rolePlayer_.WriteTo(output, _repeated_rolePlayer_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rolePlayer_.CalculateSize(_repeated_rolePlayer_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RolePlayers other) {
      if (other == null) {
        return;
      }
      rolePlayer_.Add(other.rolePlayer_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rolePlayer_.AddEntriesFrom(input, _repeated_rolePlayer_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RolePlayer : pb::IMessage<RolePlayer> {
    private static readonly pb::MessageParser<RolePlayer> _parser = new pb::MessageParser<RolePlayer>(() => new RolePlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RolePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePlayer(RolePlayer other) : this() {
      Role = other.role_ != null ? other.Role.Clone() : null;
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePlayer Clone() {
      return new RolePlayer(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Ai.Grakn.Rpc.Generated.Concept role_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Ai.Grakn.Rpc.Generated.Concept player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RolePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RolePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Role, other.Role)) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (role_ != null) hash ^= Role.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (role_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Role);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RolePlayer other) {
      if (other == null) {
        return;
      }
      if (other.role_ != null) {
        if (role_ == null) {
          role_ = new global::Ai.Grakn.Rpc.Generated.Concept();
        }
        Role.MergeFrom(other.Role);
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Ai.Grakn.Rpc.Generated.Concept();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (role_ == null) {
              role_ = new global::Ai.Grakn.Rpc.Generated.Concept();
            }
            input.ReadMessage(role_);
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::Ai.Grakn.Rpc.Generated.Concept();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Concepts : pb::IMessage<Concepts> {
    private static readonly pb::MessageParser<Concepts> _parser = new pb::MessageParser<Concepts>(() => new Concepts());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Concepts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concepts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concepts(Concepts other) : this() {
      concept_ = other.concept_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concepts Clone() {
      return new Concepts(this);
    }

    /// <summary>Field number for the "concept" field.</summary>
    public const int ConceptFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Ai.Grakn.Rpc.Generated.Concept> _repeated_concept_codec
        = pb::FieldCodec.ForMessage(10, global::Ai.Grakn.Rpc.Generated.Concept.Parser);
    private readonly pbc::RepeatedField<global::Ai.Grakn.Rpc.Generated.Concept> concept_ = new pbc::RepeatedField<global::Ai.Grakn.Rpc.Generated.Concept>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ai.Grakn.Rpc.Generated.Concept> Concept {
      get { return concept_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Concepts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Concepts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!concept_.Equals(other.concept_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= concept_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      concept_.WriteTo(output, _repeated_concept_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += concept_.CalculateSize(_repeated_concept_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Concepts other) {
      if (other == null) {
        return;
      }
      concept_.Add(other.concept_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            concept_.AddEntriesFrom(input, _repeated_concept_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptionalConcept : pb::IMessage<OptionalConcept> {
    private static readonly pb::MessageParser<OptionalConcept> _parser = new pb::MessageParser<OptionalConcept>(() => new OptionalConcept());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionalConcept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalConcept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalConcept(OptionalConcept other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Present:
          Present = other.Present.Clone();
          break;
        case ValueOneofCase.Absent:
          Absent = other.Absent.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalConcept Clone() {
      return new OptionalConcept(this);
    }

    /// <summary>Field number for the "present" field.</summary>
    public const int PresentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Concept Present {
      get { return valueCase_ == ValueOneofCase.Present ? (global::Ai.Grakn.Rpc.Generated.Concept) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Present;
      }
    }

    /// <summary>Field number for the "absent" field.</summary>
    public const int AbsentFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit Absent {
      get { return valueCase_ == ValueOneofCase.Absent ? (global::Ai.Grakn.Rpc.Generated.Unit) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Absent;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Present = 1,
      Absent = 2,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionalConcept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionalConcept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Present, other.Present)) return false;
      if (!object.Equals(Absent, other.Absent)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Present) hash ^= Present.GetHashCode();
      if (valueCase_ == ValueOneofCase.Absent) hash ^= Absent.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Present) {
        output.WriteRawTag(10);
        output.WriteMessage(Present);
      }
      if (valueCase_ == ValueOneofCase.Absent) {
        output.WriteRawTag(18);
        output.WriteMessage(Absent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Present) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Present);
      }
      if (valueCase_ == ValueOneofCase.Absent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Absent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionalConcept other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Present:
          if (Present == null) {
            Present = new global::Ai.Grakn.Rpc.Generated.Concept();
          }
          Present.MergeFrom(other.Present);
          break;
        case ValueOneofCase.Absent:
          if (Absent == null) {
            Absent = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          Absent.MergeFrom(other.Absent);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ai.Grakn.Rpc.Generated.Concept subBuilder = new global::Ai.Grakn.Rpc.Generated.Concept();
            if (valueCase_ == ValueOneofCase.Present) {
              subBuilder.MergeFrom(Present);
            }
            input.ReadMessage(subBuilder);
            Present = subBuilder;
            break;
          }
          case 18: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (valueCase_ == ValueOneofCase.Absent) {
              subBuilder.MergeFrom(Absent);
            }
            input.ReadMessage(subBuilder);
            Absent = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptionalRegex : pb::IMessage<OptionalRegex> {
    private static readonly pb::MessageParser<OptionalRegex> _parser = new pb::MessageParser<OptionalRegex>(() => new OptionalRegex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionalRegex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalRegex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalRegex(OptionalRegex other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Present:
          Present = other.Present;
          break;
        case ValueOneofCase.Absent:
          Absent = other.Absent.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalRegex Clone() {
      return new OptionalRegex(this);
    }

    /// <summary>Field number for the "present" field.</summary>
    public const int PresentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Present {
      get { return valueCase_ == ValueOneofCase.Present ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.Present;
      }
    }

    /// <summary>Field number for the "absent" field.</summary>
    public const int AbsentFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit Absent {
      get { return valueCase_ == ValueOneofCase.Absent ? (global::Ai.Grakn.Rpc.Generated.Unit) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Absent;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Present = 1,
      Absent = 2,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionalRegex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionalRegex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Present != other.Present) return false;
      if (!object.Equals(Absent, other.Absent)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Present) hash ^= Present.GetHashCode();
      if (valueCase_ == ValueOneofCase.Absent) hash ^= Absent.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Present) {
        output.WriteRawTag(10);
        output.WriteString(Present);
      }
      if (valueCase_ == ValueOneofCase.Absent) {
        output.WriteRawTag(18);
        output.WriteMessage(Absent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Present) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Present);
      }
      if (valueCase_ == ValueOneofCase.Absent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Absent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionalRegex other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Present:
          Present = other.Present;
          break;
        case ValueOneofCase.Absent:
          if (Absent == null) {
            Absent = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          Absent.MergeFrom(other.Absent);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Present = input.ReadString();
            break;
          }
          case 18: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (valueCase_ == ValueOneofCase.Absent) {
              subBuilder.MergeFrom(Absent);
            }
            input.ReadMessage(subBuilder);
            Absent = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pattern : pb::IMessage<Pattern> {
    private static readonly pb::MessageParser<Pattern> _parser = new pb::MessageParser<Pattern>(() => new Pattern());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern(Pattern other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern Clone() {
      return new Pattern(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pattern other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptionalPattern : pb::IMessage<OptionalPattern> {
    private static readonly pb::MessageParser<OptionalPattern> _parser = new pb::MessageParser<OptionalPattern>(() => new OptionalPattern());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionalPattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalPattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalPattern(OptionalPattern other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Present:
          Present = other.Present.Clone();
          break;
        case ValueOneofCase.Absent:
          Absent = other.Absent.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalPattern Clone() {
      return new OptionalPattern(this);
    }

    /// <summary>Field number for the "present" field.</summary>
    public const int PresentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Pattern Present {
      get { return valueCase_ == ValueOneofCase.Present ? (global::Ai.Grakn.Rpc.Generated.Pattern) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Present;
      }
    }

    /// <summary>Field number for the "absent" field.</summary>
    public const int AbsentFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit Absent {
      get { return valueCase_ == ValueOneofCase.Absent ? (global::Ai.Grakn.Rpc.Generated.Unit) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Absent;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Present = 1,
      Absent = 2,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionalPattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionalPattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Present, other.Present)) return false;
      if (!object.Equals(Absent, other.Absent)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Present) hash ^= Present.GetHashCode();
      if (valueCase_ == ValueOneofCase.Absent) hash ^= Absent.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Present) {
        output.WriteRawTag(10);
        output.WriteMessage(Present);
      }
      if (valueCase_ == ValueOneofCase.Absent) {
        output.WriteRawTag(18);
        output.WriteMessage(Absent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Present) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Present);
      }
      if (valueCase_ == ValueOneofCase.Absent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Absent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionalPattern other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Present:
          if (Present == null) {
            Present = new global::Ai.Grakn.Rpc.Generated.Pattern();
          }
          Present.MergeFrom(other.Present);
          break;
        case ValueOneofCase.Absent:
          if (Absent == null) {
            Absent = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          Absent.MergeFrom(other.Absent);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ai.Grakn.Rpc.Generated.Pattern subBuilder = new global::Ai.Grakn.Rpc.Generated.Pattern();
            if (valueCase_ == ValueOneofCase.Present) {
              subBuilder.MergeFrom(Present);
            }
            input.ReadMessage(subBuilder);
            Present = subBuilder;
            break;
          }
          case 18: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (valueCase_ == ValueOneofCase.Absent) {
              subBuilder.MergeFrom(Absent);
            }
            input.ReadMessage(subBuilder);
            Absent = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptionalDataType : pb::IMessage<OptionalDataType> {
    private static readonly pb::MessageParser<OptionalDataType> _parser = new pb::MessageParser<OptionalDataType>(() => new OptionalDataType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionalDataType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ai.Grakn.Rpc.Generated.ConceptReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalDataType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalDataType(OptionalDataType other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Present:
          Present = other.Present;
          break;
        case ValueOneofCase.Absent:
          Absent = other.Absent.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionalDataType Clone() {
      return new OptionalDataType(this);
    }

    /// <summary>Field number for the "present" field.</summary>
    public const int PresentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.DataType Present {
      get { return valueCase_ == ValueOneofCase.Present ? (global::Ai.Grakn.Rpc.Generated.DataType) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Present;
      }
    }

    /// <summary>Field number for the "absent" field.</summary>
    public const int AbsentFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ai.Grakn.Rpc.Generated.Unit Absent {
      get { return valueCase_ == ValueOneofCase.Absent ? (global::Ai.Grakn.Rpc.Generated.Unit) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Absent;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Present = 1,
      Absent = 2,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionalDataType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionalDataType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Present != other.Present) return false;
      if (!object.Equals(Absent, other.Absent)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Present) hash ^= Present.GetHashCode();
      if (valueCase_ == ValueOneofCase.Absent) hash ^= Absent.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Present) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Present);
      }
      if (valueCase_ == ValueOneofCase.Absent) {
        output.WriteRawTag(18);
        output.WriteMessage(Absent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Present) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Present);
      }
      if (valueCase_ == ValueOneofCase.Absent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Absent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionalDataType other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Present:
          Present = other.Present;
          break;
        case ValueOneofCase.Absent:
          if (Absent == null) {
            Absent = new global::Ai.Grakn.Rpc.Generated.Unit();
          }
          Absent.MergeFrom(other.Absent);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            value_ = input.ReadEnum();
            valueCase_ = ValueOneofCase.Present;
            break;
          }
          case 18: {
            global::Ai.Grakn.Rpc.Generated.Unit subBuilder = new global::Ai.Grakn.Rpc.Generated.Unit();
            if (valueCase_ == ValueOneofCase.Absent) {
              subBuilder.MergeFrom(Absent);
            }
            input.ReadMessage(subBuilder);
            Absent = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
