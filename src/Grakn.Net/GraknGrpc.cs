// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: grakn.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Ai.Grakn.Rpc.Generated {
  public static partial class Grakn
  {
    static readonly string __ServiceName = "ai.grakn.rpc.generated.Grakn";

    static readonly grpc::Marshaller<global::Ai.Grakn.Rpc.Generated.TxRequest> __Marshaller_TxRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ai.Grakn.Rpc.Generated.TxRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Ai.Grakn.Rpc.Generated.TxResponse> __Marshaller_TxResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ai.Grakn.Rpc.Generated.TxResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Ai.Grakn.Rpc.Generated.DeleteRequest> __Marshaller_DeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ai.Grakn.Rpc.Generated.DeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Ai.Grakn.Rpc.Generated.DeleteResponse> __Marshaller_DeleteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ai.Grakn.Rpc.Generated.DeleteResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Ai.Grakn.Rpc.Generated.TxRequest, global::Ai.Grakn.Rpc.Generated.TxResponse> __Method_Tx = new grpc::Method<global::Ai.Grakn.Rpc.Generated.TxRequest, global::Ai.Grakn.Rpc.Generated.TxResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Tx",
        __Marshaller_TxRequest,
        __Marshaller_TxResponse);

    static readonly grpc::Method<global::Ai.Grakn.Rpc.Generated.DeleteRequest, global::Ai.Grakn.Rpc.Generated.DeleteResponse> __Method_Delete = new grpc::Method<global::Ai.Grakn.Rpc.Generated.DeleteRequest, global::Ai.Grakn.Rpc.Generated.DeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_DeleteRequest,
        __Marshaller_DeleteResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ai.Grakn.Rpc.Generated.GraknReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Grakn</summary>
    public abstract partial class GraknBase
    {
      /// <summary>
      ///
      ///Represents a full transaction. The stream of `TxRequest`s must begin with a `Open` message.
      ///When the call is completed, the transaction will always be closed, with or without a `Commit` message.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Tx(grpc::IAsyncStreamReader<global::Ai.Grakn.Rpc.Generated.TxRequest> requestStream, grpc::IServerStreamWriter<global::Ai.Grakn.Rpc.Generated.TxResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///Delete a keyspace.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ai.Grakn.Rpc.Generated.DeleteResponse> Delete(global::Ai.Grakn.Rpc.Generated.DeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Grakn</summary>
    public partial class GraknClient : grpc::ClientBase<GraknClient>
    {
      /// <summary>Creates a new client for Grakn</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GraknClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Grakn that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GraknClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GraknClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GraknClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      ///Represents a full transaction. The stream of `TxRequest`s must begin with a `Open` message.
      ///When the call is completed, the transaction will always be closed, with or without a `Commit` message.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Ai.Grakn.Rpc.Generated.TxRequest, global::Ai.Grakn.Rpc.Generated.TxResponse> Tx(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Tx(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Represents a full transaction. The stream of `TxRequest`s must begin with a `Open` message.
      ///When the call is completed, the transaction will always be closed, with or without a `Commit` message.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Ai.Grakn.Rpc.Generated.TxRequest, global::Ai.Grakn.Rpc.Generated.TxResponse> Tx(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Tx, null, options);
      }
      /// <summary>
      ///
      ///Delete a keyspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ai.Grakn.Rpc.Generated.DeleteResponse Delete(global::Ai.Grakn.Rpc.Generated.DeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Delete a keyspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ai.Grakn.Rpc.Generated.DeleteResponse Delete(global::Ai.Grakn.Rpc.Generated.DeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      ///
      ///Delete a keyspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ai.Grakn.Rpc.Generated.DeleteResponse> DeleteAsync(global::Ai.Grakn.Rpc.Generated.DeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Delete a keyspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ai.Grakn.Rpc.Generated.DeleteResponse> DeleteAsync(global::Ai.Grakn.Rpc.Generated.DeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GraknClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GraknClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GraknBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Tx, serviceImpl.Tx)
          .AddMethod(__Method_Delete, serviceImpl.Delete).Build();
    }

  }
}
#endregion
